const lessonData = "ewogICJwcm9qZWN0IjogbnVsbCwKICAib3JnYW5pemF0aW9uIjogewogICAgImlkIjogImNtY215NmtsazAweGFqbDA3d250aWI2NXUiLAogICAgIm5hbWUiOiAiU2tpdHJlIgogIH0sCiAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyBhbmQgQ29ycG9yYXRlIFJlYWRpbmVzcyIsCiAgImJsb2NrcyI6IHsKICAgICJwbGFjZWhvbGRlci1pZCI6IHsKICAgICAgInR5cGUiOiAidGlsZWRMYXlvdXQiLAogICAgICAiZGF0YSI6IHt9LAogICAgICAibGF5b3V0IjogewogICAgICAgICJyb3dzIjogWwogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAicm93MSIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAidFdOWCIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJyb3cyIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICI1YzZyIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogdHJ1ZQogICAgfSwKICAgICJOU0VDIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJBY2hpZXZpbmcgWW91ciBDb3Vyc2UgR29hbHMiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRoaXMgY291cnNlIGlzIG1ldGljdWxvdXNseSBjcmFmdGVkIHRvIGVtcG93ZXIgeW91IHdpdGggYSByb2J1c3QgZXRoaWNhbCBmb3VuZGF0aW9uIGFuZCB0aGUgcHJhY3RpY2FsIGV4cGVydGlzZSBuZWVkZWQgdG8gc2tpbGxmdWxseSBuYXZpZ2F0ZSBkaXZlcnNlIHdvcmtwbGFjZSBzY2VuYXJpb3MuIEJ5IHRoZSBlbmQsIHlvdSdsbCBlbWVyZ2UgYXMgYSBtb3JlIGNvbmZpZGVudCBhbmQgd2VsbC1wcmVwYXJlZCBtYW5hZ2VtZW50IHByb2Zlc3Npb25hbCBbM10uIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJub25lIgogICAgICB9CiAgICB9LAogICAgIk93RkoiOiB7CiAgICAgICJ0eXBlIjogInRleHROb2RlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiRXZlbiBpZiBpdCdzIG5vdCBpbW1lZGlhdGVseSBwdWJsaWMsIHRoZSBpbnRlZ3JpdHkgb2Ygb3VyIHdvcmsgaXMgYXQgc3Rha2UuIFdlIG5lZWQgdG8gYmUgYWJsZSB0byBzdGFuZCBieSBvdXIgcHJvZHVjdCB3aXRoIGNvbmZpZGVuY2UuIExldCdzIHRyeSB0byB0aGluayBhYm91dCB0aGlzIGZyb20gYSB0cmFuc3BhcmVuY3kgcGVyc3BlY3RpdmUgYWdhaW4uIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgIm5leHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJub2RlIiwKICAgICAgICAgICJpZCI6ICJld2E1IgogICAgICAgIH0sCiAgICAgICAgImNoYXJhY3RlclBvc2UiOiB7CiAgICAgICAgICAiY2hhcmFjdGVySWQiOiAiZXJpYyIsCiAgICAgICAgICAiZW1vdGlvbiI6ICJjb25mdXNlZCIsCiAgICAgICAgICAidHlwZSI6ICJwcmVzZXQiCiAgICAgICAgfSwKICAgICAgICAic2NlbmUiOiB7CiAgICAgICAgICAiaWQiOiAiaUpaZyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJwb3NpdGlvbiI6IHsKICAgICAgICAieCI6IDM3NTAsCiAgICAgICAgInkiOiAwCiAgICAgIH0sCiAgICAgICJwYXJlbnRJZCI6ICJQdVNmIgogICAgfSwKICAgICJpUjFhIjogewogICAgICAidHlwZSI6ICJzZWN0aW9uQ2FsbG91dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIgogICAgICB9CiAgICB9LAogICAgIi1zRlIiOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkFwcGx5aW5nIHRoZSBFdGhpY2FsIEZyYW1ld29yayIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiSW1hZ2luZSB5b3UncmUgYSBtYW5hZ2VyIHdobyB1bmNvdmVycyB0aGF0IHlvdXIgdG9wIHNhbGVzcGVyc29uIGlzIGVtcGxveWluZyAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAibWlzbGVhZGluZywgeWV0IG5vdCBpbGxlZ2FsLCBzYWxlcyB0YWN0aWNzIiwKICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiIHRvIHNlY3VyZSBkZWFscy4gVGhpcyBzaXR1YXRpb24gcHJlc2VudHMgYSBjbGFzc2ljIGV0aGljYWwgZGlsZW1tYSB0aGF0IGNhbiBiZSBlZmZlY3RpdmVseSBhbmFseXplZCB1c2luZyBvdXIgdGhyZWUtcGFydCBmcmFtZXdvcms6IHRoZSAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiVHJhbnNwYXJlbmN5IFRlc3QiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIsIHRoZSAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiR29sZGVuIFJ1bGUgVGVzdCIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiwgYW5kIHRoZSAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiQ29uc2VxdWVuY2VzIFRlc3QiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIuXSBbMF0iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogIm5vbmUiCiAgICAgIH0KICAgIH0sCiAgICAiazVQZiI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJJbiB0b2RheSdzIGR5bmFtaWMgYnVzaW5lc3MgZW52aXJvbm1lbnQsIHN1Y2Nlc3MgaGluZ2VzIG5vdCBvbmx5IG9uIHN0cmF0ZWdpYyBhY3VtZW4gYnV0IGFsc28gb24gYSBzdHJvbmcgZXRoaWNhbCBjb21wYXNzIGFuZCBhIHJlYWRpbmVzcyB0byBuYXZpZ2F0ZSBjb21wbGV4IGNvcnBvcmF0ZSBsYW5kc2NhcGVzLiBUaGlzIGNvdXJzZSBpcyBkZXNpZ25lZCB0byBlcXVpcCB5b3Ugd2l0aCB0aGUgZXNzZW50aWFsIGluc2lnaHRzIGFuZCBwcmFjdGljYWwgdG9vbHMgdG8gZXhjZWwgYXMgYW4gZXRoaWNhbCBhbmQgcHJlcGFyZWQgbGVhZGVyLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiVGhyb3VnaCB0aGlzIG1vZHVsZSwgeW91IHdpbGwgZXhwbG9yZToiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiYnVsbGV0TGlzdCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiVGhlIGZ1bmRhbWVudGFsIGltcG9ydGFuY2Ugb2YgYnVzaW5lc3MgZXRoaWNzIGluIGJ1aWxkaW5nIHRydXN0IGFuZCBsb25nLXRlcm0gdmFsdWUuIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkEgcHJhY3RpY2FsIGZyYW1ld29yayBmb3IgbWFraW5nIHNvdW5kIGV0aGljYWwgZGVjaXNpb25zIHdoZW4gZmFjZWQgd2l0aCBjb21wbGV4IGRpbGVtbWFzLiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJLZXkgYXNwZWN0cyBvZiBwcm9mZXNzaW9uYWxpc20gYW5kIGhvdyB0byBlZmZlY3RpdmVseSBjb250cmlidXRlIHRvIGFuZCBhZGFwdCB3aXRoaW4gZGl2ZXJzZSBjb3Jwb3JhdGUgY3VsdHVyZXMuIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogIm5vbmUiCiAgICAgIH0KICAgIH0sCiAgICAiS25JVyI6IHsKICAgICAgInR5cGUiOiAiZmxhc2hjYXJkc1RpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAiaXRlbXMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJmcm9udCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIldoYXQgaXMgcHJvZmVzc2lvbmFsaXNtIGluIHRoZSBjb3Jwb3JhdGUgd29ybGQ/IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyb250VHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgImZyb250SW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiYmFjayI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkl0J3MgYWRoZXJpbmcgdG8gaGlnaCBzdGFuZGFyZHMgb2YgY29uZHVjdCwgYXBwZWFyYW5jZSwgYW5kIGNvbW11bmljYXRpb24gdGhhdCByZWZsZWN0IHBvc2l0aXZlbHkgb24gb25lc2VsZiBhbmQgdGhlIG9yZ2FuaXphdGlvbi4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiYmFja1R5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICJiYWNrSW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiaWQiOiAiVlQyOSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJmcm9udCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIldoeSBpcyBldGhpY2FsIGNvbmR1Y3Qgdml0YWwgZm9yIGNvcnBvcmF0ZSByZWFkaW5lc3M/IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyb250VHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgImZyb250SW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiYmFjayI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkl0IGJ1aWxkcyB0cnVzdCwgZW5oYW5jZXMgcmVwdXRhdGlvbiwgbWl0aWdhdGVzIHJpc2tzLCBhbmQgZm9zdGVycyBhIHBvc2l0aXZlIHdvcmsgZW52aXJvbm1lbnQuIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImJhY2tUeXBlIjogInRleHQiLAogICAgICAgICAgICAiYmFja0ltYWdlIjogbnVsbCwKICAgICAgICAgICAgImlkIjogIi1FZHIiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiZnJvbnQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJOYW1lIGEga2V5IGFzcGVjdCBvZiBwcm9mZXNzaW9uYWwgYXBwZWFyYW5jZS4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJvbnRUeXBlIjogInRleHQiLAogICAgICAgICAgICAiZnJvbnRJbWFnZSI6IG51bGwsCiAgICAgICAgICAgICJiYWNrIjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiRHJlc3NpbmcgYXBwcm9wcmlhdGVseSBmb3IgdGhlIGNvcnBvcmF0ZSBlbnZpcm9ubWVudCwgb2Z0ZW4gYnVzaW5lc3MgYXR0aXJlIG9yIHNtYXJ0IGNhc3VhbC4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiYmFja1R5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICJiYWNrSW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiaWQiOiAidUI4UiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJmcm9udCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkhvdyBkb2VzIGNvbW11bmljYXRpb24gcmVsYXRlIHRvIHByb2Zlc3Npb25hbGlzbT8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJvbnRUeXBlIjogInRleHQiLAogICAgICAgICAgICAiZnJvbnRJbWFnZSI6IG51bGwsCiAgICAgICAgICAgICJiYWNrIjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiQ2xlYXIsIGNvbmNpc2UsIGFuZCByZXNwZWN0ZnVsIGNvbW11bmljYXRpb24gZGVtb25zdHJhdGVzIGNvbXBldGVuY2UgYW5kIGJ1aWxkcyBwcm9kdWN0aXZlIHJlbGF0aW9uc2hpcHMuIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImJhY2tUeXBlIjogInRleHQiLAogICAgICAgICAgICAiYmFja0ltYWdlIjogbnVsbCwKICAgICAgICAgICAgImlkIjogImlERjQiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibW9kZSI6ICJjYXJvdXNlbCIKICAgICAgfQogICAgfSwKICAgICJUOEY3IjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJXaGF0IGFyZSBCdXNpbmVzcyBFdGhpY3M/IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJ0aXRsZSIKICAgICAgfQogICAgfSwKICAgICJCOEZGIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJpRlRKIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJYTXBIIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogInlRMVMiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogImxaUUQiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiOFJjdCIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IDAuNTYyNSwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjcsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogImxuT3QiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAibUpXXyIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiMDZ2UyIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJPclM3IiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJUX0cxIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIkV5bXoiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIlhTX1QiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAic2VjdGlvbkRpdmlkZXIiOiBmYWxzZQogICAgfSwKICAgICI2dFVqIjogewogICAgICAidHlwZSI6ICJsaXN0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJpdGVtcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJUaGUgTWFya2t1bGEgQ2VudGVyIGZvciBBcHBsaWVkIEV0aGljcyBhdCBTYW50YSBDbGFyYSBVbml2ZXJzaXR5OiIsCiAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiBBY2Nlc3MgZnJlZSBjYXNlIHN0dWRpZXMgYW5kIGV0aGljYWwgZGVjaXNpb24tbWFraW5nIGZyYW1ld29ya3MuIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlkIjogImFTemIiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkdsYXNzZG9vcjoiLAogICAgICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIgUmVzZWFyY2ggY29tcGFueSBjdWx0dXJlIGFuZCBnYWluIGluc2lnaHRzIGludG8gd29ya3BsYWNlcyBiZXlvbmQgam9iIGh1bnRpbmcuIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlkIjogIlB2WkEiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiY29sdW1ucyI6ICIxIiwKICAgICAgICAibW9kZSI6ICJCdWxsZXRlZCIKICAgICAgfQogICAgfSwKICAgICJac3ROIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJnM1pPIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJzWWNrIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIlJDX0kiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogInYtT3EiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiSEFnYiIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiNkpzNCIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJSVk5lIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICIzUm1sIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogInpXN1giLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIjZ0VWoiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiYy04cyIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAibzkyZCIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJEWm93IiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJyQjRTIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogZmFsc2UKICAgIH0sCiAgICAid19BdCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJBcHBseWluZyB0aGlzIGV0aGljYWwgZnJhbWV3b3JrIGNsZWFybHkgaW5kaWNhdGVzIHRoZSBuZWVkIHRvICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJhZGRyZXNzIHRoZSBpc3N1ZSBkaXJlY3RseSB3aXRoIHRoZSBzYWxlc3BlcnNvbiIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiwgZ3VpZGluZyB0aGVtIHRvd2FyZHMgbW9yZSAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiZXRoaWNhbCBhbmQgc3VzdGFpbmFibGUgc2FsZXMgcHJhY3RpY2VzIiwKICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiIHRoYXQgcHJpb3JpdGl6ZSBpbnRlZ3JpdHkgb3ZlciBkZWNlcHRpdmUgbWV0aG9kcy4gWzRdIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJub25lIgogICAgICB9CiAgICB9LAogICAgIjZKczQiOiB7CiAgICAgICJ0eXBlIjogImxpc3RUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgIml0ZW1zIjogWwogICAgICAgICAgewogICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlwiVGhlIFNwZWVkIG9mIFRydXN0OiBUaGUgT25lIFRoaW5nIFRoYXQgQ2hhbmdlcyBFdmVyeXRoaW5nXCIgYnkgU3RlcGhlbiBNLlIuIENvdmV5IC0gRXhwbG9yZSB3aHkgdHJ1c3QgaXMgYSBjcml0aWNhbCBhc3NldCBpbiBidXNpbmVzcy4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiaWQiOiAiMmdndCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiSGFydmFyZCBCdXNpbmVzcyBSZXZpZXcncyBcIkV0aGljc1wiIHNlY3Rpb24gLSBTdGF5IHVwZGF0ZWQgd2l0aCBjdXJyZW50IGFydGljbGVzIGFuZCByZWFsLXdvcmxkIGNhc2Ugc3R1ZGllcy4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiaWQiOiAiYXJlZCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjb2x1bW5zIjogIjEiLAogICAgICAgICJtb2RlIjogIkJ1bGxldGVkIgogICAgICB9CiAgICB9LAogICAgIlh6VVoiOiB7CiAgICAgICJ0eXBlIjogImJ1dHRvbnNUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgIml0ZW1zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiamFhNiIsCiAgICAgICAgICAgICJsYWJlbCI6ICJCZWdpbiIsCiAgICAgICAgICAgICJkZXN0aW5hdGlvbiI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJuZXh0IiwKICAgICAgICAgICAgICAidmFsdWUiOiAibmV4dCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInN0eWxlIjogInByaW1hcnkiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAic3RhcnQiLAogICAgICAgICJzaXplIjogIm1lZGl1bSIsCiAgICAgICAgImZ1bGxXaWR0aCI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICAiNWM2ciI6IHsKICAgICAgInR5cGUiOiAiYnV0dG9uc1RpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAiaXRlbXMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJoR1VDIiwKICAgICAgICAgICAgImxhYmVsIjogIkJlZ2luIiwKICAgICAgICAgICAgImRlc3RpbmF0aW9uIjogewogICAgICAgICAgICAgICJ0eXBlIjogIm5leHQiLAogICAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzdHlsZSI6ICJwcmltYXJ5IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgInNpemUiOiAic21hbGwiLAogICAgICAgICJmdWxsV2lkdGgiOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgImFMb2YiOiB7CiAgICAgICJ0eXBlIjogIm1hdGNoaW5nVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJNYXRjaCB0aGUgZXRoaWNhbCBjb25jZXB0IHdpdGggaXRzIGRlZmluaW5nIGNoYXJhY3RlcmlzdGljLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJpdGVtcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImNob2ljZSI6ICJFdGhpY2FsIERpbGVtbWEiLAogICAgICAgICAgICAibWF0Y2giOiAiQSBjaG9pY2UgYmV0d2VlbiB0d28gb3IgbW9yZSBtb3JhbGx5IGRlZmVuc2libGUgYWN0aW9ucywgZWFjaCB3aXRoIHVuZGVzaXJhYmxlIGNvbnNlcXVlbmNlcy4iLAogICAgICAgICAgICAiaWQiOiAiejJHeiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjaG9pY2UiOiAiU2ltcGxlIFJpZ2h0IHZzLiBXcm9uZyIsCiAgICAgICAgICAgICJtYXRjaCI6ICJBIGNsZWFyIGNob2ljZSB3aGVyZSBvbmUgb3B0aW9uIGlzIGNsZWFybHkgdW5ldGhpY2FsIG9yIGlsbGVnYWwuIiwKICAgICAgICAgICAgImlkIjogIndxMG4iCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY2hvaWNlIjogIkJ1c2luZXNzIEV0aGljcyIsCiAgICAgICAgICAgICJtYXRjaCI6ICJUaGUgdW53cml0dGVuIHJ1bGVzIGd1aWRpbmcgaG93IGNvbXBhbmllcyBhbmQgZW1wbG95ZWVzIG9wZXJhdGUsIGZvY3VzaW5nIG9uIHdoYXQgaXMgcmlnaHQgYW5kIGp1c3QuIiwKICAgICAgICAgICAgImlkIjogIk80dloiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgInNZYWYiOiB7CiAgICAgICJ0eXBlIjogImltYWdlVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJpbWFnZSI6IHsKICAgICAgICAgICJhbHRUZXh0IjogIkEgd2VsbC1saXQsIHByb2Zlc3Npb25hbCBpbWFnZSBvZiBhIGRpdmVyc2UgZ3JvdXAgb2YgdGhyZWUgYnVzaW5lc3MgcHJvZmVzc2lvbmFscyBpbiBhIG1vZGVybiBvZmZpY2Ugc2V0dGluZywgZW5nYWdlZCBpbiBhIGRpc2N1c3Npb24sIGNvbnZleWluZyBjb2xsYWJvcmF0aW9uIGFuZCBldGhpY2FsIGRlY2lzaW9uLW1ha2luZy4iLAogICAgICAgICAgImFzcGVjdFJhdGlvIjogMS43OCwKICAgICAgICAgICJpbWFnZUlkIjogInVwbG9hZHMvYzBkNzI1YTEtODA5Ni00MmFmLTkzNGEtMGQ5ZjU5MzQ1NDViL2dlbmVyYXRlZC1pbWFnZS5qcGciLAogICAgICAgICAgInNlYXJjaFRlcm0iOiAiQSB3ZWxsLWxpdCwgcHJvZmVzc2lvbmFsIGltYWdlIG9mIGEgZGl2ZXJzZSBncm91cCBvZiB0aHJlZSBidXNpbmVzcyBwcm9mZXNzaW9uYWxzIGluIGEgbW9kZXJuIG9mZmljZSBzZXR0aW5nLCBlbmdhZ2VkIGluIGEgZGlzY3Vzc2lvbiwgY29udmV5aW5nIGNvbGxhYm9yYXRpb24gYW5kIGV0aGljYWwgZGVjaXNpb24tbWFraW5nLiIsCiAgICAgICAgICAic291cmNlVHlwZSI6ICJHZW5lcmF0ZWQiLAogICAgICAgICAgInJpZ2h0c1R5cGUiOiAiVW5rbm93biIsCiAgICAgICAgICAibGF5b3V0IjogInJpZ2h0IiwKICAgICAgICAgICJzb3VyY2UiOiAiLi9hc3NldHMvaW1hZ2VzL2ltYWdlLTIxZTc2YjU0LWU0MDctNDQxOS1iMDk1LWJkMDhjMjUzOTRlMy5wbmciLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbWluZHNtaXRoL3VwbG9hZHMlMkZjMGQ3MjVhMS04MDk2LTQyYWYtOTM0YS0wZDlmNTkzNDU0NWIlMkZnZW5lcmF0ZWQtaW1hZ2UuanBnIgogICAgICAgIH0sCiAgICAgICAgIm9iamVjdEZpdCI6ICJjb3ZlciIsCiAgICAgICAgInN0YXR1cyI6ICJBdmFpbGFibGUiCiAgICAgIH0KICAgIH0sCiAgICAiUXJlZCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJXZWxjb21lISBXZSdyZSB0aHJpbGxlZCB0byBoYXZlIHlvdSBqb2luIHVzIGZvciB0aGlzIGNydWNpYWwgZXhwbG9yYXRpb24gaW50byAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiQnVzaW5lc3MgRXRoaWNzIGFuZCBDb3Jwb3JhdGUgUmVhZGluZXNzIiwKICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiBDb25zaWRlciB0aGlzIGpvdXJuZXkgeW91ciBwZXJzb25hbCBwcmVwYXJhdGlvbiBmb3IgdGhlIGNvbXBsZXggY2hhbGxlbmdlcyBvZiB0aGUgY29ycG9yYXRlIHdvcmxkLiBXZSdsbCBkaXN0aWxsIGludHJpY2F0ZSBjb25jZXB0cyBpbnRvIGNsZWFyLCBhY3Rpb25hYmxlIHN0cmF0ZWdpZXMsIGVuc3VyaW5nIHlvdSdyZSByZWFkeSB0byBleGNlbCBbMF0uIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJPdXIgb25lLWhvdXIgc2Vzc2lvbiBpcyBkZXNpZ25lZCB0byBiZSBoaWdobHkgZm9jdXNlZCwgZHluYW1pYywgYW5kIGludGVuc2VseSBwcmFjdGljYWwsIGFpbWluZyB0byBwcm92aWRlIHlvdSB3aXRoIGltbWVkaWF0ZSwgdmFsdWFibGUgc2tpbGxzLiBMZXQncyBnZXQgeW91IHByZXBhcmVkIGFuZCBjb25maWRlbnQgZm9yIHlvdXIgbWFuYWdlbWVudCBjYXJlZXIgWzFdLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJja1o0IjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJBIFNpbXBsZSBGcmFtZXdvcmsgZm9yIEV0aGljYWwgRGVjaXNpb25zIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJ0aXRsZSIKICAgICAgfQogICAgfSwKICAgICJ3NVBPIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJUaGUgQ29tcGFueSdzIFVuaXF1ZSBQZXJzb25hbGl0eSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiRXZlcnkgb3JnYW5pemF0aW9uIHBvc3Nlc3NlcyBhIGRpc3RpbmN0IFwicGVyc29uYWxpdHksXCIgb2Z0ZW4gcmVmZXJyZWQgdG8gYXMgaXRzICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJjb3Jwb3JhdGUgY3VsdHVyZSIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIi4gVGhpcyBlbmNvbXBhc3NlcyBhIGNvbXBsZXggaW50ZXJwbGF5IG9mIHNoYXJlZCB2YWx1ZXMsIGVzdGFibGlzaGVkIGNvbW11bmljYXRpb24gc3R5bGVzLCBhbmQgdGhlIG92ZXJhbGwgd29yayBlbnZpcm9ubWVudC4gVG8gYmUgdHJ1bHkgIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogImNvcnBvcmF0ZSByZWFkeSIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiBtZWFucyB5b3UgY2FuIHN3aWZ0bHkgZ3Jhc3AgYW5kIGVmZmVjdGl2ZWx5IGludGVncmF0ZSBpbnRvIHRoaXMgdW5pcXVlIGN1bHR1cmUgWzFdLiBUaGlzIGludm9sdmVzIGtlZW4gb2JzZXJ2YXRpb24gb2YgaG93IGNvbGxlYWd1ZXMgaW50ZXJhY3QsIGhvdyBkZWNpc2lvbnMgYXJlIG1hZGUsIGFuZCB3aGF0IGJlaGF2aW9ycyBhcmUgcmVjb2duaXplZCBhbmQgcmV3YXJkZWQuIEEgY3JpdGljYWwgY29tcG9uZW50IG9mIHRoaXMgcmVhZGluZXNzIGlzIGEgdGhvcm91Z2ggdW5kZXJzdGFuZGluZyBvZiB0aGUgY29tcGFueSdzICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJDb2RlIG9mIENvbmR1Y3QiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIsIGEgZm9ybWFsIGRvY3VtZW50IHRoYXQgYXJ0aWN1bGF0ZXMgaXRzIGV0aGljYWwgZXhwZWN0YXRpb25zIGFuZCBndWlkZWxpbmVzLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJ2LU9xIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJSZWFkaW5nIExpc3Q6IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJub25lIgogICAgICB9CiAgICB9LAogICAgIlVnSkEiOiB7CiAgICAgICJ0eXBlIjogInRpbGVkTGF5b3V0IiwKICAgICAgImRhdGEiOiB7fSwKICAgICAgImxheW91dCI6IHsKICAgICAgICAicm93cyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogImVQRDMiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEuMiwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiOFJVYiIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJmb0tGIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogMSwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLjIsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIkN0TUQiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjUKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiLW5XRiIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDAuNQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogdHJ1ZQogICAgfSwKICAgICJaZmtuIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJDYXNlIFN0dWR5OiBUaGUgVm9sa3N3YWdlbiBcIkRpZXNlbGdhdGVcIiBTY2FuZGFsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJBIHN0YXJrIGlsbHVzdHJhdGlvbiBvZiBldGhpY2FsIGZhaWx1cmUgaXMgdGhlICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJWb2xrc3dhZ2VuIFwiRGllc2VsZ2F0ZVwiIHNjYW5kYWwiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgb2YgMjAxNS4gVm9sa3N3YWdlbiwgYSBnbG9iYWwgYXV0b21vdGl2ZSBnaWFudCwgd2FzIGZvdW5kIHRvIGhhdmUgZGVsaWJlcmF0ZWx5IGluc3RhbGxlZCBcImRlZmVhdCBkZXZpY2VzXCIgaW4gaXRzIGRpZXNlbCB2ZWhpY2xlcy4gVGhlc2UgZGV2aWNlcyBhbGxvd2VkIGNhcnMgdG8gcGFzcyBlbWlzc2lvbnMgdGVzdHMgaW4gbGFib3JhdG9yaWVzIHdoaWxlIGVtaXR0aW5nIHBvbGx1dGFudHMgdXAgdG8gNDAgdGltZXMgdGhlIGxlZ2FsIGxpbWl0IG9uIHRoZSByb2FkICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIuIFRoaXMgYWN0IHdhcyBub3Qgb25seSBhIGNsZWFyIHZpb2xhdGlvbiBvZiBlbnZpcm9ubWVudGFsIGxhd3MgYnV0IGFsc28gYSBwcm9mb3VuZCBicmVhY2ggb2YgdHJ1c3Qgd2l0aCBjb25zdW1lcnMgYW5kIHJlZ3VsYXRvcnkgYm9kaWVzIHdvcmxkd2lkZS4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogIm5vbmUiCiAgICAgIH0KICAgIH0sCiAgICAibG5PdCI6IHsKICAgICAgInR5cGUiOiAiaW1hZ2VUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgImltYWdlIjogewogICAgICAgICAgImFsdFRleHQiOiAiQSBicmlnaHRseSBsaXQsIHByb2Zlc3Npb25hbCBpbWFnZSBvZiB0aHJlZSBkaXZlcnNlIGJ1c2luZXNzIHBlb3BsZSBjb2xsYWJvcmF0aW5nIGFyb3VuZCBhIHRhYmxlLCBkaXNjdXNzaW5nIGRvY3VtZW50cywgY29udmV5aW5nIGV0aGljYWwgZGVjaXNpb24tbWFraW5nIGFuZCB0ZWFtd29yay4iLAogICAgICAgICAgImFzcGVjdFJhdGlvIjogMS43OCwKICAgICAgICAgICJpbWFnZUlkIjogInVwbG9hZHMvN2Y0OTA0M2UtNGQzOS00ZjVkLThkMTEtYzgzOWViMTFiMzc3L2dlbmVyYXRlZC1pbWFnZS5qcGciLAogICAgICAgICAgInNlYXJjaFRlcm0iOiAiQSBicmlnaHRseSBsaXQsIHByb2Zlc3Npb25hbCBpbWFnZSBvZiB0aHJlZSBkaXZlcnNlIGJ1c2luZXNzIHBlb3BsZSBjb2xsYWJvcmF0aW5nIGFyb3VuZCBhIHRhYmxlLCBkaXNjdXNzaW5nIGRvY3VtZW50cywgY29udmV5aW5nIGV0aGljYWwgZGVjaXNpb24tbWFraW5nIGFuZCB0ZWFtd29yay4iLAogICAgICAgICAgInNvdXJjZVR5cGUiOiAiR2VuZXJhdGVkIiwKICAgICAgICAgICJyaWdodHNUeXBlIjogIlVua25vd24iLAogICAgICAgICAgImxheW91dCI6ICJsZWZ0IiwKICAgICAgICAgICJzb3VyY2UiOiAiLi9hc3NldHMvaW1hZ2VzL2ltYWdlLTI5Y2MyNGU3LTdkZmUtNDMxZC1iNjZiLWI4ZTk3MDAxYzAxYS5wbmciLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbWluZHNtaXRoL3VwbG9hZHMlMkY3ZjQ5MDQzZS00ZDM5LTRmNWQtOGQxMS1jODM5ZWIxMWIzNzclMkZnZW5lcmF0ZWQtaW1hZ2UuanBnIgogICAgICAgIH0sCiAgICAgICAgIm9iamVjdEZpdCI6ICJjb3ZlciIsCiAgICAgICAgInN0YXR1cyI6ICJBdmFpbGFibGUiCiAgICAgIH0KICAgIH0sCiAgICAibmRtNyI6IHsKICAgICAgInR5cGUiOiAiaW1hZ2VUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgImltYWdlIjogewogICAgICAgICAgImFsdFRleHQiOiAiQSBicmlnaHRseSBsaXQsIHByb2Zlc3Npb25hbCBpbWFnZSBvZiBhIGRpdmVyc2UgZ3JvdXAgb2YgdGhyZWUgYnVzaW5lc3MgcHJvZmVzc2lvbmFscyBpbiBhIG1vZGVybiwgZHluYW1pYyBvZmZpY2Ugc2V0dGluZywgZGVtb25zdHJhdGluZyBhZGFwdGFiaWxpdHkgYW5kIGVmZmVjdGl2ZSBjb21tdW5pY2F0aW9uLiIsCiAgICAgICAgICAiYXNwZWN0UmF0aW8iOiAxLAogICAgICAgICAgImltYWdlSWQiOiAidXBsb2Fkcy8zODY5YjFjOC01YTc2LTQyNGItYjg2NC03ZTQyZTNhN2U2ZWMvZ2VuZXJhdGVkLWltYWdlLmpwZyIsCiAgICAgICAgICAic2VhcmNoVGVybSI6ICJBIGJyaWdodGx5IGxpdCwgcHJvZmVzc2lvbmFsIGltYWdlIG9mIGEgZGl2ZXJzZSBncm91cCBvZiB0aHJlZSBidXNpbmVzcyBwcm9mZXNzaW9uYWxzIGluIGEgbW9kZXJuLCBkeW5hbWljIG9mZmljZSBzZXR0aW5nLCBkZW1vbnN0cmF0aW5nIGFkYXB0YWJpbGl0eSBhbmQgZWZmZWN0aXZlIGNvbW11bmljYXRpb24uIiwKICAgICAgICAgICJzb3VyY2VUeXBlIjogIkdlbmVyYXRlZCIsCiAgICAgICAgICAicmlnaHRzVHlwZSI6ICJVbmtub3duIiwKICAgICAgICAgICJsYXlvdXQiOiAibGVmdC1mdWxsIiwKICAgICAgICAgICJzb3VyY2UiOiAiLi9hc3NldHMvaW1hZ2VzL2ltYWdlLTJhMzg0NjhlLWM3YmQtNDA4NC1hY2VjLTE1OTVjNGYwYTBkMS5wbmciLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbWluZHNtaXRoL3VwbG9hZHMlMkYzODY5YjFjOC01YTc2LTQyNGItYjg2NC03ZTQyZTNhN2U2ZWMlMkZnZW5lcmF0ZWQtaW1hZ2UuanBnIgogICAgICAgIH0sCiAgICAgICAgIm9iamVjdEZpdCI6ICJjb3ZlciIsCiAgICAgICAgInN0YXR1cyI6ICJBdmFpbGFibGUiCiAgICAgIH0KICAgIH0sCiAgICAiaUpaZyI6IHsKICAgICAgInR5cGUiOiAic2NlbmVOb2RlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgImJhY2tncm91bmQiOiB7CiAgICAgICAgICAiYXNwZWN0UmF0aW8iOiAxLjQ5ODA0Njg3NSwKICAgICAgICAgICJzb3VyY2VUeXBlIjogIlVwbG9hZCIsCiAgICAgICAgICAicmlnaHRzVHlwZSI6ICJVcGxvYWRlZCIsCiAgICAgICAgICAic291cmNlIjogIi4vYXNzZXRzL2ltYWdlcy9zY2VuZS1TY2VuZSAxLnBuZyIKICAgICAgICB9LAogICAgICAgICJuYW1lIjogIlNjZW5lIDEiLAogICAgICAgICJvcmRlciI6ICJhMCIKICAgICAgfSwKICAgICAgInBhcmVudElkIjogIlB1U2YiCiAgICB9LAogICAgIlhNcEgiOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRoZSBJbXBlcmF0aXZlIG9mIEJ1c2luZXNzIEV0aGljcyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAidGl0bGUiCiAgICAgIH0KICAgIH0sCiAgICAiQ3RNRCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiTmF2aWdhdGluZyBFdGhpY2FsIERpbGVtbWFzIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJub25lIgogICAgICB9CiAgICB9LAogICAgInpTRGsiOiB7CiAgICAgICJ0eXBlIjogImxpc3RUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgIml0ZW1zIjogWwogICAgICAgICAgewogICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIk1vZHVsZSAxOiBUaGUgV2h5IG9mIEJ1c2luZXNzIEV0aGljcyIsCiAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiAoMTUgbWludXRlcykgWzVdIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlkIjogIkIxWFoiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIk1vZHVsZSAyOiBOYXZpZ2F0aW5nIEV0aGljYWwgRGlsZW1tYXMiLAogICAgICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIgKDMwIG1pbnV0ZXMpIFs2XSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpZCI6ICIwZGdPIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJNb2R1bGUgMzogQ29ycG9yYXRlIFJlYWRpbmVzcyBpbiBBY3Rpb24iLAogICAgICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIgKDI1IG1pbnV0ZXMpIFs3XSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpZCI6ICJ1UFpNIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJGaW5hbCBSZWZsZWN0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiICgxMCBtaW51dGVzKSBbOF0iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiaWQiOiAiWjBGdyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjb2x1bW5zIjogIjEiLAogICAgICAgICJtb2RlIjogIkJ1bGxldGVkIgogICAgICB9CiAgICB9LAogICAgInV3TFoiOiB7CiAgICAgICJ0eXBlIjogInF1ZXN0aW9uVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJvcHRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiQU9jeSIsCiAgICAgICAgICAgICJ0ZXh0IjogIlRpbWUgTWFuYWdlbWVudCIsCiAgICAgICAgICAgICJjb3JyZWN0IjogdHJ1ZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJITTVaIiwKICAgICAgICAgICAgInRleHQiOiAiRmluYW5jaWFsIFNwZWN1bGF0aW9uIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJ1aGRuIiwKICAgICAgICAgICAgInRleHQiOiAiQ29tbXVuaWNhdGlvbiIsCiAgICAgICAgICAgICJjb3JyZWN0IjogdHJ1ZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJCNlI1IiwKICAgICAgICAgICAgInRleHQiOiAiRGlnaXRhbCBFdGlxdWV0dGUiLAogICAgICAgICAgICAiY29ycmVjdCI6IHRydWUsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAibGxTQyIsCiAgICAgICAgICAgICJ0ZXh0IjogIkFjY291bnRhYmlsaXR5IiwKICAgICAgICAgICAgImNvcnJlY3QiOiB0cnVlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImdhY1ciLAogICAgICAgICAgICAidGV4dCI6ICJBZ2dyZXNzaXZlIE5lZ290aWF0aW9uIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICJmZWVkYmFja1doZW5Db3JyZWN0IjogIiIsCiAgICAgICAgInNlbGVjdE11bHRpcGxlIjogdHJ1ZSwKICAgICAgICAiZmVlZGJhY2tNb2RlIjogImNvcnJlY3QgLyBpbmNvcnJlY3QiLAogICAgICAgICJxdWVzdGlvbiI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiV2hpY2ggb2YgdGhlIGZvbGxvd2luZyBhcmUga2V5IHBpbGxhcnMgb2YgcHJvZmVzc2lvbmFsaXNtIGRpc2N1c3NlZCBpbiB0aGUgY291cnNlPyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJncmFkZWQiOiB0cnVlCiAgICAgIH0KICAgIH0sCiAgICAiRkZTSCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJUaGlzIG1vZHVsZSBhaW1zIHRvIHByb3ZpZGUgYSBwcmFjdGljYWwgdW5kZXJzdGFuZGluZyBvZiB0aGUgIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogInByb2Zlc3Npb25hbGlzbSIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiBhbmQgIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogImV0aGljYWwgY29uZHVjdCIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiBlc3NlbnRpYWwgZm9yIHN1Y2Nlc3MgaW4gYSBjb3Jwb3JhdGUgc2V0dGluZy4gWW91IHdpbGwgZXhwbG9yZSB0aGUgY29yZSBlbGVtZW50cyB0aGF0IGRlZmluZSBhIHJlYWR5IGFuZCByZXNwb25zaWJsZSBwcm9mZXNzaW9uYWwgd2l0aGluIGFueSBvcmdhbml6YXRpb24uIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJub25lIgogICAgICB9CiAgICB9LAogICAgImxaUUQiOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkJleW9uZCBDb21wbGlhbmNlOiBUaGUgU3RyYXRlZ2ljIEFkdmFudGFnZSBvZiBFdGhpY3MiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkluIHRoZSBjb250ZW1wb3JhcnkgYnVzaW5lc3MgbGFuZHNjYXBlLCBldGhpY2FsIGNvbmR1Y3QgdHJhbnNjZW5kcyBtZXJlIGNvbXBsaWFuY2U7IGl0J3MgYSAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAic3RyYXRlZ2ljIG5lY2Vzc2l0eSIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiBDb21wYW5pZXMgdGhhdCBwcmlvcml0aXplIHN0cm9uZyBldGhpY2FsIHByaW5jaXBsZXMgb2Z0ZW4gZmluZCB0aGVtc2VsdmVzIGF0IGEgc2lnbmlmaWNhbnQgYWR2YW50YWdlLiBUaGlzIGFwcHJvYWNoIGN1bHRpdmF0ZXMgIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogImRlZXAgdHJ1c3QiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgd2l0aCBjdXN0b21lcnMsIGZvc3RlcmluZyBsb3lhbHR5IGFuZCByZXBlYXQgYnVzaW5lc3MuIEl0IGFsc28gc2VydmVzIGFzIGEgcG93ZXJmdWwgbWFnbmV0IGZvciAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAidG9wIHRhbGVudCIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiwgYXMgcHJvZmVzc2lvbmFscyBpbmNyZWFzaW5nbHkgc2VlayB0byBhbGlnbiB3aXRoIG9yZ2FuaXphdGlvbnMgdGhhdCByZWZsZWN0IHRoZWlyIHZhbHVlcy4gRnVydGhlcm1vcmUsIGEgcm9idXN0IGV0aGljYWwgZnJhbWV3b3JrIGFjdHMgYXMgYSBzaGllbGQsIGhlbHBpbmcgYnVzaW5lc3NlcyAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiYXZlcnQgY29zdGx5IGxlZ2FsIGVudGFuZ2xlbWVudHMiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgYW5kICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJkYW1hZ2luZyBwdWJsaWMgcmVsYXRpb25zIGNyaXNlcyIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIi4gVWx0aW1hdGVseSwgZXRoaWNhbCBiZWhhdmlvciBmb3JtcyB0aGUgIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogImJlZHJvY2sgb2YgYSB0cnVseSBzdXN0YWluYWJsZSBhbmQgcHJvc3Blcm91cyBlbnRlcnByaXNlIiwKICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIuIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJub25lIgogICAgICB9CiAgICB9LAogICAgIkNXYW8iOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNoZWNrcG9pbnQgMzogUmVmbGVjdGlvbiBQcm9tcHQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogInRpdGxlIgogICAgICB9CiAgICB9LAogICAgIlZXa08iOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkEgUHJhY3RpY2FsIEV0aGljYWwgQ2hlY2tsaXN0IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJXaGVuIGZhY2VkIHdpdGggY29tcGxleCBldGhpY2FsIGNob2ljZXMsIGhhdmluZyBhIGNsZWFyLCBhY3Rpb25hYmxlIGZyYW1ld29yayBjYW4gc2ltcGxpZnkgdGhlIGRlY2lzaW9uLW1ha2luZyBwcm9jZXNzLiBUaGlzIHNlY3Rpb24gaW50cm9kdWNlcyBhIHN0cmFpZ2h0Zm9yd2FyZCwgdGhyZWUtc3RlcCBtZW50YWwgY2hlY2tsaXN0IGRlc2lnbmVkIHRvIGd1aWRlIHlvdSB0b3dhcmQgc291bmQgZXRoaWNhbCBvdXRjb21lcy4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogIm5vbmUiCiAgICAgIH0KICAgIH0sCiAgICAieVV0MyI6IHsKICAgICAgInR5cGUiOiAidGFibGVUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgImNvbnRlbnQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogW10KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgInRhYmxlIjogewogICAgICAgICAgImNlbGxzIjogWwogICAgICAgICAgICBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbnRlbnQiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNvbnNlcXVlbmNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29udGVudCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiSW1wYWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbnRlbnQiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkZpbmVzIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29udGVudCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiQmlsbGlvbnMgb2YgZG9sbGFycyBpbiBwZW5hbHRpZXMiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29udGVudCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiU3RvY2sgVmFsdWUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb250ZW50IjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJNYXNzaXZlIGRyb3AgaW4gbWFya2V0IGNhcGl0YWxpemF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbnRlbnQiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkN1c3RvbWVyIFRydXN0IgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29udGVudCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiU2V2ZXJlIGxvc3MsIHJlcXVpcmluZyB5ZWFycyB0byByZWJ1aWxkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICBdLAogICAgICAgICAgImNvbHVtbldpZHRocyI6IFsKICAgICAgICAgICAgMC41LAogICAgICAgICAgICAwLjUKICAgICAgICAgIF0sCiAgICAgICAgICAiaGFzSGVhZGVyUm93IjogdHJ1ZSwKICAgICAgICAgICJoYXNIZWFkZXJDb2x1bW4iOiBmYWxzZQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJsWF9mIjogewogICAgICAidHlwZSI6ICJxdWVzdGlvblRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAib3B0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjUwSkQiLAogICAgICAgICAgICAidGV4dCI6ICJUbyBhdm9pZCBhbGwgZm9ybXMgb2YgY29uZmxpY3QgaW4gdGhlIHdvcmtwbGFjZSIsCiAgICAgICAgICAgICJjb3JyZWN0IjogZmFsc2UsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAidVI3cCIsCiAgICAgICAgICAgICJ0ZXh0IjogIlRvIGFsd2F5cyBwcmlvcml0aXplIHBlcnNvbmFsIGdhaW4iLAogICAgICAgICAgICAiY29ycmVjdCI6IGZhbHNlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIllFNVYiLAogICAgICAgICAgICAidGV4dCI6ICJUbyBiZWNvbWUgYSB0aG91Z2h0ZnVsLCBldGhpY2FsLCBhbmQgZWZmZWN0aXZlIGxlYWRlciIsCiAgICAgICAgICAgICJjb3JyZWN0IjogdHJ1ZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJIN1hqIiwKICAgICAgICAgICAgInRleHQiOiAiVG8gZW5zdXJlIHlvdSBuZXZlciBmYWNlIGEgZGlmZmljdWx0IGRlY2lzaW9uIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICJmZWVkYmFja1doZW5Db3JyZWN0IjogIiIsCiAgICAgICAgInNlbGVjdE11bHRpcGxlIjogZmFsc2UsCiAgICAgICAgImZlZWRiYWNrTW9kZSI6ICJjb3JyZWN0IC8gaW5jb3JyZWN0IiwKICAgICAgICAicXVlc3Rpb24iOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkFjY29yZGluZyB0byB0aGUgY291cnNlLCB3aGF0IGlzIHRoZSB1bHRpbWF0ZSBnb2FsIG9mIGRldmVsb3BpbmcgeW91ciBldGhpY2FsIFwibXVzY2xlXCIgYW5kIGNvcnBvcmF0ZSByZWFkaW5lc3M/IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImdyYWRlZCI6IHRydWUKICAgICAgfQogICAgfSwKICAgICJJZkNUIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICIyWGkzIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJIZUlLIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIkVHX3AiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIlB1U2YiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiZTdGTyIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiZUdhNyIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJGUlBmIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJncEJTIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIjdxMmYiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogInQ2T2oiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAic2VjdGlvbkRpdmlkZXIiOiBmYWxzZQogICAgfSwKICAgICJQT3ZuIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICI2OGxZIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJja1o0IiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIllxZEoiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIlZXa08iLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAicTRvaSIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiOTlHdyIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICI0WkJIIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogMC41NjI1LAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDAuNywKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiSzlTQSIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJTLW1iIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJTejVZIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogZmFsc2UKICAgIH0sCiAgICAiUHVTZiI6IHsKICAgICAgInR5cGUiOiAiZXhwZXJpZW5jZVRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAicm9vdCI6IHsKICAgICAgICAgICJ0eXBlIjogIm5vZGUiLAogICAgICAgICAgImlkIjogImJGOGsiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImp2NzQiOiB7CiAgICAgICJ0eXBlIjogInRpbGVkTGF5b3V0IiwKICAgICAgImRhdGEiOiB7fSwKICAgICAgImxheW91dCI6IHsKICAgICAgICAicm93cyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIjhrbnEiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIkNXYW8iLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAidGpFNiIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAia1lMSCIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJZWlR4IiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJSTkpkIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogImNWYk4iLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIkRfVFAiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAic2VjdGlvbkRpdmlkZXIiOiBmYWxzZQogICAgfSwKICAgICJQa05BIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJVbmRlcnN0YW5kaW5nIGFuZCBDb250cmlidXRpbmcgdG8gQ29ycG9yYXRlIEN1bHR1cmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogInRpdGxlIgogICAgICB9CiAgICB9LAogICAgIl9YWGEiOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNvdXJzZSBPdmVydmlldyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAidGl0bGUiCiAgICAgIH0KICAgIH0sCiAgICAiZnIxYSI6IHsKICAgICAgInR5cGUiOiAidGFic1RpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAiaXRlbXMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJsYWJlbCI6ICJUcmFuc3BhcmVuY3kgVGVzdCIsCiAgICAgICAgICAgICJjb250ZW50IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiV291bGQgeW91IGJlIGNvbWZvcnRhYmxlIGV4cGxhaW5pbmcgdGhlc2UgdGFjdGljcyB0byB0aGUgZW50aXJlIGNvbXBhbnkgZHVyaW5nIGEgbWVldGluZz8gTGlrZWx5IG5vdCwgYXMgaXQgd291bGQgZXhwb3NlIHF1ZXN0aW9uYWJsZSBwcmFjdGljZXMgYW5kIHVuZGVybWluZSB0cnVzdC4gWzFdIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1lZGlhIjogbnVsbCwKICAgICAgICAgICAgImlkIjogIm5HOEwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibGFiZWwiOiAiR29sZGVuIFJ1bGUgVGVzdCIsCiAgICAgICAgICAgICJjb250ZW50IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiUHV0IHlvdXJzZWxmIGluIHRoZSBjdXN0b21lcidzIHNob2VzLiBJZiB5b3Ugd2VyZSBhIGN1c3RvbWVyLCB3b3VsZCB5b3Ugd2FudCB0byBiZSBzb2xkIGEgcHJvZHVjdCBvciBzZXJ2aWNlIHVzaW5nIHRoZXNlIG1ldGhvZHM/IEl0J3MgaGlnaGx5IGltcHJvYmFibGUgeW91J2QgYXBwcmVjaWF0ZSBzdWNoIGFuIGFwcHJvYWNoLCBoaWdobGlnaHRpbmcgYSBsYWNrIG9mIGZhaXJuZXNzLiBbMl0iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWVkaWEiOiBudWxsLAogICAgICAgICAgICAiaWQiOiAiS1pHZiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJsYWJlbCI6ICJDb25zZXF1ZW5jZXMgVGVzdCIsCiAgICAgICAgICAgICJjb250ZW50IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiV2hpbGUgdGhlc2UgdGFjdGljcyBtaWdodCBib29zdCBzaG9ydC10ZXJtIHJldmVudWUsIGNvbnNpZGVyIHRoZSBsb25nLXRlcm0gcmVwZXJjdXNzaW9ucy4gVGhleSBjb3VsZCBsZWFkIHRvICIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAidW5oYXBweSBjdXN0b21lcnMiLAogICAgICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIsIGEgIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJkYW1hZ2VkIGNvbXBhbnkgcmVwdXRhdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiwgYW5kIGZvc3RlciBhICIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiY3VsdHVyZSBvZiBkaXNob25lc3R5IiwKICAgICAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiIHdpdGhpbiB5b3VyIHRlYW0sIGZhciBvdXR3ZWlnaGluZyBhbnkgaW1tZWRpYXRlIGdhaW5zLiBbM10iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWVkaWEiOiBudWxsLAogICAgICAgICAgICAiaWQiOiAiUEZIbyIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0sCiAgICAiUkZ4MiI6IHsKICAgICAgInR5cGUiOiAidGlsZWRMYXlvdXQiLAogICAgICAiZGF0YSI6IHt9LAogICAgICAibGF5b3V0IjogewogICAgICAgICJyb3dzIjogWwogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiMEJINCIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiUWlvNyIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJaeVIwIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJ2VjhIIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogInBEQlkiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIkdaYU4iLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiWDFiSiIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IDAuNTYyNSwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjcsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogImJVMnAiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiRXhDWiIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiLVQ2aiIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJMNUJDIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJCMFE0IiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogZmFsc2UKICAgIH0sCiAgICAiR1phTiI6IHsKICAgICAgInR5cGUiOiAiYWNjb3JkaW9uVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJpdGVtcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImhlYWRlciI6ICJBY2NvdW50YWJpbGl0eSIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwsCiAgICAgICAgICAgICJpbWFnZUFsaWduIjogInN0YXJ0IiwKICAgICAgICAgICAgImNvbnRlbnQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJCZWluZyBhY2NvdW50YWJsZSBtZWFucyAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogInRha2luZyBmdWxsIG93bmVyc2hpcCIsCiAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiBvZiB5b3VyIGFjdGlvbnMgYW5kIHJlc3BvbnNpYmlsaXRpZXMuIElmIGEgcHJvamVjdCBlbmNvdW50ZXJzIGEgc2V0YmFjayBvciB5b3UgbWlzcyBhIGRlYWRsaW5lLCBpdCdzIGNydWNpYWwgdG8gYWNrbm93bGVkZ2UgeW91ciByb2xlLCBleHBsYWluIHRoZSBzdGVwcyB5b3UnbGwgdGFrZSB0byByZWN0aWZ5IHRoZSBzaXR1YXRpb24sIGFuZCBsZWFybiBmcm9tIHRoZSBleHBlcmllbmNlIHJhdGhlciB0aGFuIGRlZmxlY3RpbmcgYmxhbWUuIFRoaXMgYnVpbGRzIGNyZWRpYmlsaXR5IGFuZCBkZW1vbnN0cmF0ZXMgbWF0dXJpdHkgIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIuIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlkIjogIk9UOTMiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaGVhZGVyIjogIkNvbW11bmljYXRpb24iLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiaW1hZ2VBbGlnbiI6ICJzdGFydCIsCiAgICAgICAgICAgICJjb250ZW50IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiRWZmZWN0aXZlIGNvbW11bmljYXRpb24gaXMgdGhlIGNvcm5lcnN0b25lIG9mIHByb2Zlc3Npb25hbCBzdWNjZXNzLiBUaGlzIGludm9sdmVzIGJlaW5nICIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiY2xlYXIsIGNvbmNpc2UsIGFuZCByZXNwZWN0ZnVsIiwKICAgICAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiIGluIGFsbCB5b3VyIGludGVyYWN0aW9uc+KAlHdoZXRoZXIgdGhyb3VnaCBlbWFpbHMsIHZpcnR1YWwgbWVldGluZ3MsIG9yIGZhY2UtdG8tZmFjZSBjb252ZXJzYXRpb25zLiBJdCBhbHNvIGVuY29tcGFzc2VzICIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiYWN0aXZlIGxpc3RlbmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiwgZW5zdXJpbmcgeW91IGZ1bGx5IHVuZGVyc3RhbmQgb3RoZXJzJyBwZXJzcGVjdGl2ZXMgYW5kIGNvbnRyaWJ1dGUgbWVhbmluZ2Z1bGx5IHRvIGRpc2N1c3Npb25zICIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpZCI6ICJZUW9DIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImhlYWRlciI6ICJUaW1lIE1hbmFnZW1lbnQiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiaW1hZ2VBbGlnbiI6ICJzdGFydCIsCiAgICAgICAgICAgICJjb250ZW50IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiTWFzdGVyaW5nIHRpbWUgbWFuYWdlbWVudCBpcyBhYm91dCAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogInJlc3BlY3RpbmcgeW91ciBvd24gdGltZSBhbmQgdGhlIHRpbWUgb2Ygb3RoZXJzIiwKICAgICAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiBUaGlzIHRyYW5zbGF0ZXMgdG8gcHVuY3R1YWxpdHkgZm9yIGFsbCBtZWV0aW5ncywgdmlydHVhbCBvciBpbi1wZXJzb24sIGFuZCBjb25zaXN0ZW50bHkgZGVsaXZlcmluZyB5b3VyIHdvcmsgb24gc2NoZWR1bGUuIEVmZmljaWVudCB0aW1lIG1hbmFnZW1lbnQgc2hvd2Nhc2VzIHJlbGlhYmlsaXR5IGFuZCBjb250cmlidXRlcyB0byBvdmVyYWxsIHRlYW0gcHJvZHVjdGl2aXR5ICIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpZCI6ICJrMEs5IgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImhlYWRlciI6ICJEaWdpdGFsIEV0aXF1ZXR0ZSIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwsCiAgICAgICAgICAgICJpbWFnZUFsaWduIjogInN0YXJ0IiwKICAgICAgICAgICAgImNvbnRlbnQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJJbiB0b2RheSdzIGludGVyY29ubmVjdGVkIHdvcmxkLCBwcm9mZXNzaW9uYWwgY29uZHVjdCBleHRlbmRzIHRvIHlvdXIgb25saW5lIHByZXNlbmNlLiAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkRpZ2l0YWwgZXRpcXVldHRlIiwKICAgICAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiIGludm9sdmVzIG1haW50YWluaW5nIGFuIGFwcHJvcHJpYXRlIHNvY2lhbCBtZWRpYSBwcm9maWxlLCB1c2luZyBwcm9mZXNzaW9uYWwgbGFuZ3VhZ2Ugb24gaW50ZXJuYWwgY29tbXVuaWNhdGlvbiBwbGF0Zm9ybXMgbGlrZSBTbGFjayBvciBUZWFtcywgYW5kIHVuZGVyc3RhbmRpbmcgdGhlIGltcGxpY2F0aW9ucyBvZiB5b3VyIG9ubGluZSBhY3Rpb25zIG9uIHlvdXIgcHJvZmVzc2lvbmFsIGltYWdlIGFuZCB5b3VyIG9yZ2FuaXphdGlvbidzIHJlcHV0YXRpb24gIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIuIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlkIjogIlhBNHoiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIgogICAgICB9CiAgICB9LAogICAgIkpnN1ciOiB7CiAgICAgICJ0eXBlIjogInRpbGVkTGF5b3V0IiwKICAgICAgImRhdGEiOiB7fSwKICAgICAgImxheW91dCI6IHsKICAgICAgICAicm93cyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIlUxNjgiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogInZXa0wiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAicEZJaiIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiRkZTSCIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICIzb2FCIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJBSWxGIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIm52U1ciLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIktuSVciLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAic2VjdGlvbkRpdmlkZXIiOiBmYWxzZQogICAgfSwKICAgICJfZndoIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJ0X0IyIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLjIsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogImlSMWEiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiSVhqMiIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IDEsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMS4yLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJNQlNyIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMC41CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIm5kbTciLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJzZWN0aW9uRGl2aWRlciI6IHRydWUKICAgIH0sCiAgICAiUk5KZCI6IHsKICAgICAgInR5cGUiOiAic2hvcnRBbnN3ZXJUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInF1ZXN0aW9uIjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFtdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJhbnN3ZXIiOiAiIiwKICAgICAgICAiZXhhbXBsZXMiOiBbXSwKICAgICAgICAiZ3JhZGVyIjogInRleHQtbWF0Y2giLAogICAgICAgICJncmFkaW5nSW5zdHJ1Y3Rpb25zIjogIiIsCiAgICAgICAgImNsb3NlTWF0Y2giOiB0cnVlLAogICAgICAgICJncmFkZWQiOiB0cnVlCiAgICAgIH0KICAgIH0sCiAgICAiSFZiRyI6IHsKICAgICAgInR5cGUiOiAicXVlc3Rpb25UaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgIm9wdGlvbnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJaQ1JfIiwKICAgICAgICAgICAgInRleHQiOiAiRGlzcmVnYXJkaW5nIGhvdyBwZW9wbGUgaW50ZXJhY3QuIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJwblFtIiwKICAgICAgICAgICAgInRleHQiOiAiV2FpdGluZyB0byBiZSB0b2xkIHdoYXQgdG8gZG8uIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJraEgxIiwKICAgICAgICAgICAgInRleHQiOiAiUXVpY2tseSB1bmRlcnN0YW5kaW5nIGFuZCBhZGFwdGluZyB0byB0aGUgY29tcGFueSBjdWx0dXJlLiIsCiAgICAgICAgICAgICJjb3JyZWN0IjogdHJ1ZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJROFBpIiwKICAgICAgICAgICAgInRleHQiOiAiSWdub3JpbmcgdGhlIGNvbXBhbnkncyBDb2RlIG9mIENvbmR1Y3QuIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICJmZWVkYmFja1doZW5Db3JyZWN0IjogIiIsCiAgICAgICAgInNlbGVjdE11bHRpcGxlIjogZmFsc2UsCiAgICAgICAgImZlZWRiYWNrTW9kZSI6ICJjb3JyZWN0IC8gaW5jb3JyZWN0IiwKICAgICAgICAicXVlc3Rpb24iOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIldoYXQgZG9lcyBpdCBtZWFuIHRvIGJlIFwiY29ycG9yYXRlIHJlYWR5XCIgaW4gdGVybXMgb2YgY29tcGFueSBjdWx0dXJlPyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJncmFkZWQiOiB0cnVlCiAgICAgIH0KICAgIH0sCiAgICAibnRQRiI6IHsKICAgICAgInR5cGUiOiAiaW1hZ2VUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgImltYWdlIjogewogICAgICAgICAgImFsdFRleHQiOiAiQSB3ZWxsLWxpdCwgcHJvZmVzc2lvbmFsIGltYWdlIG9mIGEgZGl2ZXJzZSBncm91cCBvZiBidXNpbmVzcyBwZW9wbGUgaGF2aW5nIGEgZGlzY3Vzc2lvbiBhYm91dCBldGhpY3MuIiwKICAgICAgICAgICJhc3BlY3RSYXRpbyI6IDEuNzgsCiAgICAgICAgICAiaW1hZ2VJZCI6ICJ1cGxvYWRzL2ZmZWNkM2Q0LTMwN2MtNDRiMy1hY2Y0LWJmZDdhMzAxNDJiZC9nZW5lcmF0ZWQtaW1hZ2UuanBnIiwKICAgICAgICAgICJzZWFyY2hUZXJtIjogIkEgd2VsbC1saXQsIHByb2Zlc3Npb25hbCBpbWFnZSBvZiBhIGRpdmVyc2UgZ3JvdXAgb2YgYnVzaW5lc3MgcGVvcGxlIGhhdmluZyBhIGRpc2N1c3Npb24gYWJvdXQgZXRoaWNzLiIsCiAgICAgICAgICAic291cmNlVHlwZSI6ICJHZW5lcmF0ZWQiLAogICAgICAgICAgInJpZ2h0c1R5cGUiOiAiVW5rbm93biIsCiAgICAgICAgICAibGF5b3V0IjogImxlZnQiLAogICAgICAgICAgInNvdXJjZSI6ICIuL2Fzc2V0cy9pbWFnZXMvaW1hZ2UtNjgzOWRlYWQtNThhZC00OTZiLTk3OGEtZjZjNTMzYjQ0ZWY5LnBuZyIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRmZmZWNkM2Q0LTMwN2MtNDRiMy1hY2Y0LWJmZDdhMzAxNDJiZCUyRmdlbmVyYXRlZC1pbWFnZS5qcGciCiAgICAgICAgfSwKICAgICAgICAib2JqZWN0Rml0IjogImNvdmVyIiwKICAgICAgICAic3RhdHVzIjogIkF2YWlsYWJsZSIKICAgICAgfQogICAgfSwKICAgICJlR2E3IjogewogICAgICAidHlwZSI6ICJxdWVzdGlvblRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAib3B0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIldrVFkiLAogICAgICAgICAgICAidGV4dCI6ICJQcm9maXRhYmlsaXR5IFRlc3QiLAogICAgICAgICAgICAiY29ycmVjdCI6IGZhbHNlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogInNFSDMiLAogICAgICAgICAgICAidGV4dCI6ICJDb25zZXF1ZW5jZXMgVGVzdCIsCiAgICAgICAgICAgICJjb3JyZWN0IjogZmFsc2UsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiNVpldSIsCiAgICAgICAgICAgICJ0ZXh0IjogIkdvbGRlbiBSdWxlIFRlc3QiLAogICAgICAgICAgICAiY29ycmVjdCI6IHRydWUsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAicjhnNCIsCiAgICAgICAgICAgICJ0ZXh0IjogIlRyYW5zcGFyZW5jeSBUZXN0IiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICJmZWVkYmFja1doZW5Db3JyZWN0IjogIiIsCiAgICAgICAgInNlbGVjdE11bHRpcGxlIjogZmFsc2UsCiAgICAgICAgImZlZWRiYWNrTW9kZSI6ICJjb3JyZWN0IC8gaW5jb3JyZWN0IiwKICAgICAgICAicXVlc3Rpb24iOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkluIHRoZSBzY2VuYXJpbywgd2hpY2ggZXRoaWNhbCB0ZXN0IHByaW1hcmlseSBmb2N1c2VzIG9uIGltYWdpbmluZyB5b3Vyc2VsZiBpbiB0aGUgY2xpZW50J3MgcG9zaXRpb24/IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImdyYWRlZCI6IHRydWUKICAgICAgfQogICAgfSwKICAgICJSVDVNIjogewogICAgICAidHlwZSI6ICJ0ZXh0Tm9kZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRoYXQgYXBwcm9hY2ggZmVlbHMgcmVhY3RpdmUgYW5kIGNvdWxkIHNldmVyZWx5IGRhbWFnZSBvdXIgcmVsYXRpb25zaGlwIHdpdGggdGhlIGNsaWVudC4gV2UgbmVlZCB0byBidWlsZCB0cnVzdCwgbm90IHRyeSB0byBmaXggYnJva2VuIHRydXN0LiBIb3cgd291bGQgeW91IHRydWx5IHdhbnQgdG8gYmUgdHJlYXRlZD8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAibmV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogIm5vZGUiLAogICAgICAgICAgImlkIjogImZLU0EiCiAgICAgICAgfSwKICAgICAgICAiY2hhcmFjdGVyUG9zZSI6IHsKICAgICAgICAgICJjaGFyYWN0ZXJJZCI6ICJlcmljIiwKICAgICAgICAgICJlbW90aW9uIjogInN0cmVzc2VkIiwKICAgICAgICAgICJ0eXBlIjogInByZXNldCIKICAgICAgICB9LAogICAgICAgICJzY2VuZSI6IHsKICAgICAgICAgICJpZCI6ICJpSlpnIgogICAgICAgIH0KICAgICAgfSwKICAgICAgInBvc2l0aW9uIjogewogICAgICAgICJ4IjogNjI1MCwKICAgICAgICAieSI6IDAKICAgICAgfSwKICAgICAgInBhcmVudElkIjogIlB1U2YiCiAgICB9LAogICAgImcyQUwiOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkEgUmVhbC1Xb3JsZCBTY2VuYXJpbzogUGhhcm1hY2V1dGljYWwgUHJpY2luZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiQ29uc2lkZXIgYSBwaGFybWFjZXV0aWNhbCBjb21wYW55IHRoYXQgaGFzIGRldmVsb3BlZCBhICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJsaWZlLXNhdmluZyBkcnVnIiwKICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiBUaGUgZXh0ZW5zaXZlIHJlc2VhcmNoIGFuZCBkZXZlbG9wbWVudCByZXF1aXJlZCBhIHNpZ25pZmljYW50IGludmVzdG1lbnQsIG1lYW5pbmcgdGhlIGRydWcgbmVlZHMgdG8gYmUgcHJpY2VkIGhpZ2ggdG8gIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogInJlY292ZXIgY29zdHMiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgYW5kIGVuc3VyZSB0aGUgY29tcGFueSdzICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJmdXR1cmUgdmlhYmlsaXR5IiwKICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiIHRvIGlubm92YXRlIGZ1cnRoZXIuIFRoZSBldGhpY2FsIGRpbGVtbWEgYXJpc2VzIGhlcmU6IElzIGl0IG1vcmUgXCJyaWdodFwiIHRvIHByaWNlIHRoZSBkcnVnIGFmZm9yZGFibHkgc28gdGhhdCBtb3JlIHBlb3BsZSBjYW4gYWNjZXNzIGl0LCBwb3RlbnRpYWxseSBqZW9wYXJkaXppbmcgdGhlIGNvbXBhbnkncyBhYmlsaXR5IHRvIGRldmVsb3AgZnV0dXJlIHRyZWF0bWVudHMsIG9yIHRvIG1haW50YWluIGEgaGlnaCBwcmljZSB0byBzdXN0YWluIHRoZSBjb21wYW55LCBrbm93aW5nIGl0IHdpbGwgYmUgaW5hY2Nlc3NpYmxlIHRvIG1hbnkgaW4gbmVlZD8gWzRdIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJub25lIgogICAgICB9CiAgICB9LAogICAgIjVEaF8iOiB7CiAgICAgICJ0eXBlIjogInNlY3Rpb25DYWxsb3V0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiCiAgICAgIH0KICAgIH0sCiAgICAiWGxKeCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiQ291cnNlIFN0cnVjdHVyZSBhdCBhIEdsYW5jZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJ5WWQyIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICI4bVZFIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLjIsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIjVEaF8iLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiaXdmciIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IDEsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMS4yLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJJaHNzIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMC41CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIkZyY0MiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJzZWN0aW9uRGl2aWRlciI6IHRydWUKICAgIH0sCiAgICAiYmdnZSI6IHsKICAgICAgInR5cGUiOiAidGV4dE5vZGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJGb2N1c2luZyBvbmx5IG9uIHRoZSBpbW1lZGlhdGUgd2luIG92ZXJsb29rcyB0aGUgc2lnbmlmaWNhbnQgcmlza3MuIFdlIG5lZWQgdG8gdGhpbmsgYWJvdXQgd2hhdCB0aGlzIG1lYW5zIGZvciBvdXIgZnV0dXJlLiBMZXQncyByZWNvbnNpZGVyIHRoZSBmdWxsIGNvbnNlcXVlbmNlcy4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAibmV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogInJlc3RhcnQiCiAgICAgICAgfSwKICAgICAgICAiY2hhcmFjdGVyUG9zZSI6IHsKICAgICAgICAgICJjaGFyYWN0ZXJJZCI6ICJlcmljIiwKICAgICAgICAgICJlbW90aW9uIjogImRpc2FwcG9pbnRlZCIsCiAgICAgICAgICAidHlwZSI6ICJwcmVzZXQiCiAgICAgICAgfSwKICAgICAgICAic2NlbmUiOiB7CiAgICAgICAgICAiaWQiOiAiaUpaZyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJwb3NpdGlvbiI6IHsKICAgICAgICAieCI6IDg3NTAsCiAgICAgICAgInkiOiAwCiAgICAgIH0sCiAgICAgICJwYXJlbnRJZCI6ICJQdVNmIgogICAgfSwKICAgICJsSXpHIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJodTVrIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJfWFhhIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIjA0V1ciLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiAxLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEuMiwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiUXJlZCIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDAuNQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJZUUM3IiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMC41CiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiYXA0QyIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiTlNFQyIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICIwX3FRIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJMeXZqIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIkRwbk0iLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIlhsSngiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiZl9ndiIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAielNEayIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJzZWN0aW9uRGl2aWRlciI6IGZhbHNlCiAgICB9LAogICAgImdwQlMiOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiAie1xuICBcIjpAXCI6IHt9XG59IiwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogIm5vbmUiCiAgICAgIH0KICAgIH0sCiAgICAiYlUycCI6IHsKICAgICAgInR5cGUiOiAiaW1hZ2VUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgImltYWdlIjogewogICAgICAgICAgImFsdFRleHQiOiAiQSBicmlnaHRseSBsaXQsIHByb2Zlc3Npb25hbCBpbWFnZSBvZiBhIHNpbmdsZSBwZXJzb24gYXQgYSBkZXNrLCBkZW1vbnN0cmF0aW5nIGdvb2QgdGltZSBtYW5hZ2VtZW50IGJ5IGxvb2tpbmcgYXQgYSBjYWxlbmRhciBhbmQgYSBjbG9jaywgd2l0aCBhIHRpZHkgd29ya3NwYWNlLiIsCiAgICAgICAgICAiYXNwZWN0UmF0aW8iOiAxLjc4LAogICAgICAgICAgImltYWdlSWQiOiAidXBsb2Fkcy9iOGE0ZWM0My1iMDA3LTQxOGMtODc2Zi1jMGZiMzQ4OGU0NmIvZ2VuZXJhdGVkLWltYWdlLmpwZyIsCiAgICAgICAgICAic2VhcmNoVGVybSI6ICJBIGJyaWdodGx5IGxpdCwgcHJvZmVzc2lvbmFsIGltYWdlIG9mIGEgc2luZ2xlIHBlcnNvbiBhdCBhIGRlc2ssIGRlbW9uc3RyYXRpbmcgZ29vZCB0aW1lIG1hbmFnZW1lbnQgYnkgbG9va2luZyBhdCBhIGNhbGVuZGFyIGFuZCBhIGNsb2NrLCB3aXRoIGEgdGlkeSB3b3Jrc3BhY2UuIiwKICAgICAgICAgICJzb3VyY2VUeXBlIjogIkdlbmVyYXRlZCIsCiAgICAgICAgICAicmlnaHRzVHlwZSI6ICJVbmtub3duIiwKICAgICAgICAgICJsYXlvdXQiOiAibGVmdCIsCiAgICAgICAgICAic291cmNlIjogIi4vYXNzZXRzL2ltYWdlcy9pbWFnZS03NjRjZTFiMC1mZWJhLTQ3YWEtODQ0OS0wNTExOTZiMGUzOWIucG5nIiwKICAgICAgICAgICJ0aHVtYm5haWwiOiAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL21pbmRzbWl0aC91cGxvYWRzJTJGYjhhNGVjNDMtYjAwNy00MThjLTg3NmYtYzBmYjM0ODhlNDZiJTJGZ2VuZXJhdGVkLWltYWdlLmpwZyIKICAgICAgICB9LAogICAgICAgICJvYmplY3RGaXQiOiAiY292ZXIiLAogICAgICAgICJzdGF0dXMiOiAiQXZhaWxhYmxlIgogICAgICB9CiAgICB9LAogICAgIlFpbzciOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlByb2Zlc3Npb25hbGlzbSAxMDEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogInRpdGxlIgogICAgICB9CiAgICB9LAogICAgIkt6WVUiOiB7CiAgICAgICJ0eXBlIjogInF1b3RlVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJxdW90ZSI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJGcmVlZG9tIGFuZCBSZXNwb25zaWJpbGl0eSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJhdHRyaWJ1dGlvbiI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICLigJQgTmV0ZmxpeCdzIEN1bHR1cmUgWzJdIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImltYWdlIjogbnVsbCwKICAgICAgICAiYmFja2dyb3VuZEltYWdlIjogbnVsbAogICAgICB9LAogICAgICAiZWxlbWVudENvbG9yIjogewogICAgICAgICJhbGlhcyI6ICJhY2NlbnQtMSIKICAgICAgfQogICAgfSwKICAgICJ0Nk9qIjogewogICAgICAidHlwZSI6ICJtYXRjaGluZ1RpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiTWF0Y2ggZWFjaCBldGhpY2FsIHRlc3Qgd2l0aCBpdHMgcHJpbWFyeSBmb2N1cy4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiaXRlbXMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJjaG9pY2UiOiAiVHJhbnNwYXJlbmN5IFRlc3QiLAogICAgICAgICAgICAibWF0Y2giOiAiV291bGQgdGhpcyBkZWNpc2lvbiB3aXRoc3RhbmQgcHVibGljIHNjcnV0aW55IG9yIG1lZGlhIGV4cG9zdXJlPyIsCiAgICAgICAgICAgICJpZCI6ICJuMUpnIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImNob2ljZSI6ICJHb2xkZW4gUnVsZSBUZXN0IiwKICAgICAgICAgICAgIm1hdGNoIjogIkhvdyB3b3VsZCBJIGZlZWwgaWYgSSB3ZXJlIG9uIHRoZSByZWNlaXZpbmcgZW5kIG9mIHRoaXMgZGVjaXNpb24/IiwKICAgICAgICAgICAgImlkIjogImlJRmciCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY2hvaWNlIjogIkNvbnNlcXVlbmNlcyBUZXN0IiwKICAgICAgICAgICAgIm1hdGNoIjogIldoYXQgYXJlIHRoZSBzaG9ydC10ZXJtIGFuZCBsb25nLXRlcm0gaW1wYWN0cyBvbiBhbGwgc3Rha2Vob2xkZXJzPyIsCiAgICAgICAgICAgICJpZCI6ICJ5alVxIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgICJGWmpKIjogewogICAgICAidHlwZSI6ICJub3RlVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJjb250ZW50IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlJlZmxlY3Rpb24gUHJvbXB0OiIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiBUYWtlIGEgbW9tZW50IHRvIGNvbnNpZGVyIGEgY29tcGFueSB5b3UgZGVlcGx5IGFkbWlyZS4gV2hhdCBzcGVjaWZpYyBldGhpY2FsIHZhbHVlcyBkbyB5b3Ugb2JzZXJ2ZSB0aGVtIGNvbnNpc3RlbnRseSBkZW1vbnN0cmF0aW5nIGluIHRoZWlyIG9wZXJhdGlvbnMgYW5kIGludGVyYWN0aW9ucz8gSG93IGRvIHRoZXNlIHZhbHVlcyBzaGFwZSB5b3VyIG92ZXJhbGwgcGVyY2VwdGlvbiBvZiB0aGF0IGNvbXBhbnkgYW5kIGl0cyBwcm9kdWN0cyBvciBzZXJ2aWNlcz8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfQogICAgICB9LAogICAgICAiZWxlbWVudENvbG9yIjogbnVsbAogICAgfSwKICAgICJvVzdGIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJHMzJhIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJUOEY3IiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIlpPb00iLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIlF4WmMiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAidzZHRSIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IDAuNTYyNSwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjcsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIm50UEYiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiOWZPTSIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMS4yLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJaZmtuIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMC41CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogInlVdDMiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJKRnNkIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJsX0UtIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogZmFsc2UKICAgIH0sCiAgICAiekl6aSI6IHsKICAgICAgInR5cGUiOiAiZGlhbG9ndWVOb2RlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInNjZW5lIjogewogICAgICAgICAgImlkIjogImlKWmciCiAgICAgICAgfSwKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJMZXQncyBzdGFydCB3aXRoIHRoZSAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiVHJhbnNwYXJlbmN5IFRlc3QiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIuIEVyaWMsIGhvdyB3b3VsZCB5b3UgZmVlbCBpZiBvdXIgZGVjaXNpb24gdG8gc2tpcCB0ZXN0aW5nIHdhcyBwdWJsaWNseSBkaXNjbG9zZWQsIHBlcmhhcHMgaW4gYSBuZXdzIGFydGljbGUgb3IgZGlyZWN0bHkgdG8gdGhlIGNsaWVudD8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiY2hhcmFjdGVyUG9zZSI6IHsKICAgICAgICAgICJ0eXBlIjogInVwbG9hZGVkIiwKICAgICAgICAgICJpbWFnZSI6IHsKICAgICAgICAgICAgInNvdXJjZSI6ICJhc3NldHMvaW1hZ2VzL3NvcGhpYS1uZXV0cmFsLnBuZyIsCiAgICAgICAgICAgICJhbHRUZXh0IjogInNvcGhpYSBuZXV0cmFsIiwKICAgICAgICAgICAgInJpZ2h0c1R5cGUiOiAiVW5rbm93biIsCiAgICAgICAgICAgICJzb3VyY2VUeXBlIjogIlVua25vd24iLAogICAgICAgICAgICAiYXNwZWN0UmF0aW8iOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgImxheW91dCI6ICJkZWZhdWx0IgogICAgICAgIH0sCiAgICAgICAgIm9wdGlvbnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJuZXh0IjogewogICAgICAgICAgICAgICJ0eXBlIjogIm5vZGUiLAogICAgICAgICAgICAgICJpZCI6ICJld2E1IgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkl0IHdvdWxkIGxpa2VseSBleHBvc2UgYSBsYWNrIG9mIGludGVncml0eSBhbmQgc2V2ZXJlbHkgZGFtYWdlIG91ciBjb21wYW55J3MgcmVwdXRhdGlvbiwgbWFraW5nIGl0IGNsZWFyIHdlIHByaW9yaXRpemVkIHNwZWVkIG92ZXIgcXVhbGl0eS4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZmVlZGJhY2siOiAiUHJlY2lzZWx5LiBUaGUgVHJhbnNwYXJlbmN5IFRlc3QgaGVscHMgdXMgZ2F1Z2UgcHVibGljIHBlcmNlcHRpb24gYW5kIGFjY291bnRhYmlsaXR5IFsxLjFdKGNpdGUgXCIxXCIpLiIsCiAgICAgICAgICAgICJpZCI6ICJQU0pLIiwKICAgICAgICAgICAgImNoYXJhY3RlclJlYWN0aW9uIjogewogICAgICAgICAgICAgICJjaGFyYWN0ZXJJZCI6ICJlcmljIiwKICAgICAgICAgICAgICAiZW1vdGlvbiI6ICJ0aGlua2luZyIsCiAgICAgICAgICAgICAgInR5cGUiOiAicHJlc2V0IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmV4dCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJub2RlIiwKICAgICAgICAgICAgICAiaWQiOiAiT3dGSiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJXZWxsLCBpdCdzIGp1c3QgaW50ZXJuYWwsIHJpZ2h0PyBBcyBsb25nIGFzIHRoZSBjbGllbnQgZG9lc24ndCBmaW5kIG91dCwgaXQncyBmaW5lLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmZWVkYmFjayI6ICJFdGhpY2FsIGRlY2lzaW9ucyBhcmVuJ3QganVzdCBhYm91dCBhdm9pZGluZyBkZXRlY3Rpb24uIENvbnNpZGVyIHRoZSBicm9hZGVyIGltcGxpY2F0aW9ucyBvZiB5b3VyIGFjdGlvbnMgb24gdHJ1c3QgYW5kIHJlcHV0YXRpb24sIGV2ZW4gaWYgbm90IGltbWVkaWF0ZWx5IHB1YmxpYy4iLAogICAgICAgICAgICAiaWQiOiAiV2t4ZyIsCiAgICAgICAgICAgICJjaGFyYWN0ZXJSZWFjdGlvbiI6IHsKICAgICAgICAgICAgICAiY2hhcmFjdGVySWQiOiAiZXJpYyIsCiAgICAgICAgICAgICAgImVtb3Rpb24iOiAiY29uZnVzZWQiLAogICAgICAgICAgICAgICJ0eXBlIjogInByZXNldCIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJhbmRvbWl6ZU9wdGlvbnMiOiB0cnVlLAogICAgICAgICJzaG93TWVzc2FnZUhpc3RvcnkiOiB0cnVlCiAgICAgIH0sCiAgICAgICJwb3NpdGlvbiI6IHsKICAgICAgICAieCI6IDI1MDAsCiAgICAgICAgInkiOiA2MDAKICAgICAgfSwKICAgICAgInBhcmVudElkIjogIlB1U2YiCiAgICB9LAogICAgIkx5dmoiOiB7CiAgICAgICJ0eXBlIjogImFjY29yZGlvblRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAiaXRlbXMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJoZWFkZXIiOiAiTW9kdWxlIDE6IFRoZSBXaHkgb2YgQnVzaW5lc3MgRXRoaWNzIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbCwKICAgICAgICAgICAgImltYWdlQWxpZ24iOiAic3RhcnQiLAogICAgICAgICAgICAiY29udGVudCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRoaXMgbW9kdWxlIGRlbHZlcyBpbnRvIHRoZSBmdW5kYW1lbnRhbCBpbXBvcnRhbmNlIG9mIGV0aGljYWwgcHJpbmNpcGxlcyBpbiB0aGUgYnVzaW5lc3Mgd29ybGQuIFlvdSdsbCB1bmRlcnN0YW5kIGhvdyBzdHJvbmcgZXRoaWNzIGJ1aWxkIHRydXN0LCBmb3N0ZXIgYSBwb3NpdGl2ZSBvcmdhbml6YXRpb25hbCBjdWx0dXJlLCBhbmQgY29udHJpYnV0ZSB0byBsb25nLXRlcm0gc3VjY2VzcyBhbmQgc3VzdGFpbmFiaWxpdHkgWzVdLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpZCI6ICJ0X3M4IgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImhlYWRlciI6ICJNb2R1bGUgMjogTmF2aWdhdGluZyBFdGhpY2FsIERpbGVtbWFzIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbCwKICAgICAgICAgICAgImltYWdlQWxpZ24iOiAic3RhcnQiLAogICAgICAgICAgICAiY29udGVudCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkhlcmUsIHdlJ2xsIGVxdWlwIHlvdSB3aXRoIGEgcHJhY3RpY2FsIGZyYW1ld29yayBmb3IgaWRlbnRpZnlpbmcgYW5kIHJlc29sdmluZyBjb21wbGV4IGV0aGljYWwgZGlsZW1tYXMuIExlYXJuIHRvIGFuYWx5emUgc2l0dWF0aW9ucywgY29uc2lkZXIgdmFyaW91cyBwZXJzcGVjdGl2ZXMsIGFuZCBtYWtlIHNvdW5kIGRlY2lzaW9ucyB0aGF0IGFsaWduIHdpdGggZXRoaWNhbCBzdGFuZGFyZHMgYW5kIGNvcnBvcmF0ZSB2YWx1ZXMgWzZdLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpZCI6ICJHVklYIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImhlYWRlciI6ICJNb2R1bGUgMzogQ29ycG9yYXRlIFJlYWRpbmVzcyBpbiBBY3Rpb24iLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiaW1hZ2VBbGlnbiI6ICJzdGFydCIsCiAgICAgICAgICAgICJjb250ZW50IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiVGhpcyBzZWN0aW9uIGZvY3VzZXMgb24gdGhlIHByYWN0aWNhbCBhc3BlY3RzIG9mIGNvcnBvcmF0ZSBsaWZlLCBpbmNsdWRpbmcgcHJvZmVzc2lvbmFsaXNtLCBlZmZlY3RpdmUgY29tbXVuaWNhdGlvbiwgYW5kIGFkYXB0aW5nIHRvIGRpdmVyc2UgY29ycG9yYXRlIGN1bHR1cmVzLiBEaXNjb3ZlciBob3cgdG8gY29udHJpYnV0ZSBwb3NpdGl2ZWx5IGFuZCB0aHJpdmUgd2l0aGluIGFueSBwcm9mZXNzaW9uYWwgZW52aXJvbm1lbnQgWzddLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpZCI6ICJwdXBiIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImhlYWRlciI6ICJGaW5hbCBSZWZsZWN0aW9uIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbCwKICAgICAgICAgICAgImltYWdlQWxpZ24iOiAic3RhcnQiLAogICAgICAgICAgICAiY29udGVudCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNvbmNsdWRlIHlvdXIgbGVhcm5pbmcgam91cm5leSB3aXRoIGEgZGVkaWNhdGVkIHJlZmxlY3Rpb24gcGVyaW9kLiBUaGlzIGFsbG93cyB5b3UgdG8gY29uc29saWRhdGUgeW91ciB1bmRlcnN0YW5kaW5nLCBpbnRlcm5hbGl6ZSBrZXkgdGFrZWF3YXlzLCBhbmQgY29uc2lkZXIgaG93IHRvIGFwcGx5IHlvdXIgbmV3Zm91bmQga25vd2xlZGdlIGluIHJlYWwtd29ybGQgbWFuYWdlbWVudCBzY2VuYXJpb3MgWzhdLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpZCI6ICJsbnJUIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImFsaWduIjogImNlbnRlciIKICAgICAgfQogICAgfSwKICAgICI5OUd3IjogewogICAgICAidHlwZSI6ICJ0YWJzVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJpdGVtcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImxhYmVsIjogIlRyYW5zcGFyZW5jeSBUZXN0IiwKICAgICAgICAgICAgImNvbnRlbnQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJDb25zaWRlciBpZiB5b3VyIGRlY2lzaW9uIGNvdWxkIHdpdGhzdGFuZCBwdWJsaWMgc2NydXRpbnkuIFdvdWxkIHlvdSBiZSBjb21mb3J0YWJsZSBpZiB0aGlzIGNob2ljZSB3ZXJlIHJlcG9ydGVkIGluIHRoZSBuZXdzIG9yIGlmIHlvdSBoYWQgdG8gZXhwbGFpbiBpdCB0byB5b3VyIGNsb3Nlc3QgZmFtaWx5IGFuZCBmcmllbmRzPyBJZiB0aGVyZSdzIGFueSBoZXNpdGF0aW9uIG9yIGRlc2lyZSB0byBjb25jZWFsIHRoZSBhY3Rpb24sIGl0J3MgYSBzdHJvbmcgaW5kaWNhdG9yIHRoYXQgdGhlIGRlY2lzaW9uIG1heSBub3QgYWxpZ24gd2l0aCBldGhpY2FsIHN0YW5kYXJkcy4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWVkaWEiOiBudWxsLAogICAgICAgICAgICAiaWQiOiAiMnZVMCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJsYWJlbCI6ICJHb2xkZW4gUnVsZSBUZXN0IiwKICAgICAgICAgICAgImNvbnRlbnQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJBcHBseSB0aGUgcHJpbmNpcGxlIG9mIHJlY2lwcm9jaXR5OiBob3cgd291bGQgeW91IGZlZWwgaWYgeW91IHdlcmUgb24gdGhlIHJlY2VpdmluZyBlbmQgb2YgdGhpcyBkZWNpc2lvbj8gVGhpcyB0ZXN0IHByb21wdHMgeW91IHRvIGVtcGF0aGl6ZSB3aXRoIGFsbCBwYXJ0aWVzIGludm9sdmVkLCBlbnN1cmluZyB5b3VyIGFjdGlvbnMgYXJlIGZhaXIsIHJlc3BlY3RmdWwsIGFuZCBjb25zaWRlcmF0ZSBvZiBvdGhlcnMnIHBlcnNwZWN0aXZlcyBhbmQgd2VsbC1iZWluZy4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWVkaWEiOiBudWxsLAogICAgICAgICAgICAiaWQiOiAiVi1ETSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJsYWJlbCI6ICJDb25zZXF1ZW5jZXMgVGVzdCIsCiAgICAgICAgICAgICJjb250ZW50IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiRXZhbHVhdGUgdGhlIHBvdGVudGlhbCByaXBwbGUgZWZmZWN0cyBvZiB5b3VyIGRlY2lzaW9uLiBBbmFseXplIGJvdGggdGhlIGltbWVkaWF0ZSBhbmQgbG9uZy10ZXJtIGltcGFjdHMgb24gYWxsIHJlbGV2YW50IHN0YWtlaG9sZGVycywgaW5jbHVkaW5nIGVtcGxveWVlcywgY3VzdG9tZXJzLCBpbnZlc3RvcnMsIGFuZCB0aGUgYnJvYWRlciBjb21tdW5pdHkuIEEgdGhvcm91Z2ggYXNzZXNzbWVudCBoZWxwcyB1bmNvdmVyIHVuZm9yZXNlZW4gbmVnYXRpdmUgb3V0Y29tZXMgYW5kIGd1aWRlcyB5b3UgdG93YXJkIHRoZSBtb3N0IGJlbmVmaWNpYWwgcGF0aCBmb3IgYWxsLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtZWRpYSI6IG51bGwsCiAgICAgICAgICAgICJpZCI6ICJPblcwIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgICIwNnZTIjogewogICAgICAidHlwZSI6ICJmbGFzaGNhcmRzVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJpdGVtcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImZyb250IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiV2hhdCBpcyBhIGtleSBiZW5lZml0IG9mIGV0aGljYWwgYnVzaW5lc3MgcHJhY3RpY2VzIGZvciBjdXN0b21lcnM/IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyb250VHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgImZyb250SW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiYmFjayI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkl0IGJ1aWxkcyAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogInRydXN0IiwKICAgICAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiIGFuZCBmb3N0ZXJzICIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiY3VzdG9tZXIgbG95YWx0eSIsCiAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIi4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiYmFja1R5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICJiYWNrSW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiaWQiOiAibmIwTSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJmcm9udCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkhvdyBkbyBldGhpY3MgaW1wYWN0IGVtcGxveWVlIHJlbGF0aW9ucz8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJvbnRUeXBlIjogInRleHQiLAogICAgICAgICAgICAiZnJvbnRJbWFnZSI6IG51bGwsCiAgICAgICAgICAgICJiYWNrIjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiU3Ryb25nIGV0aGljcyAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogImF0dHJhY3QgYW5kIHJldGFpbiB0YWxlbnRlZCBlbXBsb3llZXMiLAogICAgICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIgd2hvIHdhbnQgdG8gd29yayBmb3IgcmVwdXRhYmxlIGNvbXBhbmllcyAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIi4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiYmFja1R5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICJiYWNrSW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiaWQiOiAiSHhKSyIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJmcm9udCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIldoYXQgbmVnYXRpdmUgb3V0Y29tZXMgY2FuIGV0aGljcyBoZWxwIGF2b2lkPyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcm9udFR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICJmcm9udEltYWdlIjogbnVsbCwKICAgICAgICAgICAgImJhY2siOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJUaGV5IGhlbHAgYnVzaW5lc3NlcyAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogImF2b2lkIGNvc3RseSBsZWdhbCB0cm91YmxlcyIsCiAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiBhbmQgIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJwdWJsaWMgcmVsYXRpb25zIGRpc2FzdGVycyIsCiAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIi4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiYmFja1R5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICJiYWNrSW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiaWQiOiAiWW5oWSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJmcm9udCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIldoYXQgaXMgUGF0YWdvbmlhIGtub3duIGZvciBpbiB0ZXJtcyBvZiBldGhpY3M/IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyb250VHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgImZyb250SW1hZ2UiOiBudWxsLAogICAgICAgICAgICAiYmFjayI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRoZWlyIFwiRG9uJ3QgQnV5IFRoaXMgSmFja2V0XCIgY2FtcGFpZ24gYW5kIGRvbmF0aW5nIDElIG9mIHNhbGVzIHRvIGVudmlyb25tZW50YWwgY2F1c2VzICIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJiYWNrVHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgImJhY2tJbWFnZSI6IG51bGwsCiAgICAgICAgICAgICJpZCI6ICI3RGRGIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm1vZGUiOiAiZ3JpZCIKICAgICAgfQogICAgfSwKICAgICJIZUlLIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJDaGVja3BvaW50IDI6IE5hdmlnYXRpbmcgYSBQcm9qZWN0IERpbGVtbWEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogInRpdGxlIgogICAgICB9CiAgICB9LAogICAgIjhSVWIiOiB7CiAgICAgICJ0eXBlIjogInNlY3Rpb25DYWxsb3V0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiCiAgICAgIH0KICAgIH0sCiAgICAiRF9UUCI6IHsKICAgICAgInR5cGUiOiAibm90ZVRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAiY29udGVudCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJSZWZsZWN0aW9uOiIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiBXaGF0IGlzIG9uZSBjb25jcmV0ZSBhY3Rpb24geW91IGNhbiBjb21taXQgdG8gdGFraW5nIHRoaXMgd2VlayB0byBlbmhhbmNlIHlvdXIgXCJjb3Jwb3JhdGUgcmVhZGluZXNzXCI/IFRoaXMgY291bGQgaW52b2x2ZSBhY3Rpb25zIGxpa2U6IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRob3JvdWdobHkgcmV2aWV3aW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiIGFsbCBwcm9mZXNzaW9uYWwgZW1haWxzIGJlZm9yZSBzZW5kaW5nIHRoZW0uIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkRldmVsb3BpbmcgYSBtb3JlIGRldGFpbGVkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiIGRhaWx5IHNjaGVkdWxlIHRvIGltcHJvdmUgdGltZSBtYW5hZ2VtZW50LiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJSZXNlYXJjaGluZyB0aGUgQ29kZSBvZiBDb25kdWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiIG9mIGEgY29tcGFueSB5b3UgYWRtaXJlIHRvIHVuZGVyc3RhbmQgdGhlaXIgZXRoaWNhbCBndWlkZWxpbmVzLiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0KICAgICAgfSwKICAgICAgImVsZW1lbnRDb2xvciI6IG51bGwKICAgIH0sCiAgICAiWUs1bCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiQ2hlY2twb2ludCAxOiBRdWljayBRdWl6ICYgUmVmbGVjdGlvbiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAidGl0bGUiCiAgICAgIH0KICAgIH0sCiAgICAiLTR0aSI6IHsKICAgICAgInR5cGUiOiAiaW1hZ2VUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgImltYWdlIjogewogICAgICAgICAgImFsdFRleHQiOiAiQSBjb25jZXJuZWQgbWFuYWdlciB3aXRoIGEgc2VyaW91cyBleHByZXNzaW9uIGlzIGhhdmluZyBhIGNvbnZlcnNhdGlvbiB3aXRoIGEgc2FsZXNwZXJzb24gd2hvIGxvb2tzIHNsaWdodGx5IGRlZmVuc2l2ZSwgaW4gYSB3ZWxsLWxpdCwgcHJvZmVzc2lvbmFsIG9mZmljZSBzZXR0aW5nLiIsCiAgICAgICAgICAiYXNwZWN0UmF0aW8iOiAxLjc4LAogICAgICAgICAgImltYWdlSWQiOiAidXBsb2Fkcy81ZThmMzJmNi1hN2YzLTQ0MzEtOTgwOS01MWU5OWUzYmE1MDEvZ2VuZXJhdGVkLWltYWdlLmpwZyIsCiAgICAgICAgICAic2VhcmNoVGVybSI6ICJBIGNvbmNlcm5lZCBtYW5hZ2VyIHdpdGggYSBzZXJpb3VzIGV4cHJlc3Npb24gaXMgaGF2aW5nIGEgY29udmVyc2F0aW9uIHdpdGggYSBzYWxlc3BlcnNvbiB3aG8gbG9va3Mgc2xpZ2h0bHkgZGVmZW5zaXZlLCBpbiBhIHdlbGwtbGl0LCBwcm9mZXNzaW9uYWwgb2ZmaWNlIHNldHRpbmcuIiwKICAgICAgICAgICJzb3VyY2VUeXBlIjogIkdlbmVyYXRlZCIsCiAgICAgICAgICAicmlnaHRzVHlwZSI6ICJVbmtub3duIiwKICAgICAgICAgICJsYXlvdXQiOiAicmlnaHQiLAogICAgICAgICAgInNvdXJjZSI6ICIuL2Fzc2V0cy9pbWFnZXMvaW1hZ2UtOTc3NmJmOGQtYjM3YS00OTUzLWIyNjYtOTlhNGUzZDVmMjY1LnBuZyIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjVlOGYzMmY2LWE3ZjMtNDQzMS05ODA5LTUxZTk5ZTNiYTUwMSUyRmdlbmVyYXRlZC1pbWFnZS5qcGciCiAgICAgICAgfSwKICAgICAgICAib2JqZWN0Rml0IjogImNvdmVyIiwKICAgICAgICAic3RhdHVzIjogIkF2YWlsYWJsZSIKICAgICAgfQogICAgfSwKICAgICJ3T0dvIjogewogICAgICAidHlwZSI6ICJpbWFnZVRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAiaW1hZ2UiOiB7CiAgICAgICAgICAiYWx0VGV4dCI6ICJBIHZpYnJhbnQgYW5kIGRpdmVyc2UgZ3JvdXAgb2YgcHJvZmVzc2lvbmFscyBjb2xsYWJvcmF0aW5nIGluIGEgbW9kZXJuIG9mZmljZSwgc3ltYm9saXppbmcgYSBwb3NpdGl2ZSBhbmQgaW5jbHVzaXZlIGNvcnBvcmF0ZSBjdWx0dXJlLiIsCiAgICAgICAgICAiYXNwZWN0UmF0aW8iOiAxLjc4LAogICAgICAgICAgImltYWdlSWQiOiAidXBsb2Fkcy8zZGFmZTRiMy1hMjlhLTRiOTctYmY4MS04NTE0ZDlhZThhMjQvZ2VuZXJhdGVkLWltYWdlLmpwZyIsCiAgICAgICAgICAic2VhcmNoVGVybSI6ICJBIHZpYnJhbnQgYW5kIGRpdmVyc2UgZ3JvdXAgb2YgcHJvZmVzc2lvbmFscyBjb2xsYWJvcmF0aW5nIGluIGEgbW9kZXJuIG9mZmljZSwgc3ltYm9saXppbmcgYSBwb3NpdGl2ZSBhbmQgaW5jbHVzaXZlIGNvcnBvcmF0ZSBjdWx0dXJlLiIsCiAgICAgICAgICAic291cmNlVHlwZSI6ICJHZW5lcmF0ZWQiLAogICAgICAgICAgInJpZ2h0c1R5cGUiOiAiVW5rbm93biIsCiAgICAgICAgICAibGF5b3V0IjogInJpZ2h0IiwKICAgICAgICAgICJzb3VyY2UiOiAiLi9hc3NldHMvaW1hZ2VzL2ltYWdlLTk3YTcwMDA1LTIyN2ItNDdkYS05M2RhLTgzZTk2NTgyOTgyMy5wbmciLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbWluZHNtaXRoL3VwbG9hZHMlMkYzZGFmZTRiMy1hMjlhLTRiOTctYmY4MS04NTE0ZDlhZThhMjQlMkZnZW5lcmF0ZWQtaW1hZ2UuanBnIgogICAgICAgIH0sCiAgICAgICAgIm9iamVjdEZpdCI6ICJjb3ZlciIsCiAgICAgICAgInN0YXR1cyI6ICJBdmFpbGFibGUiCiAgICAgIH0KICAgIH0sCiAgICAiaEpKZyI6IHsKICAgICAgInR5cGUiOiAidGlsZWRMYXlvdXQiLAogICAgICAiZGF0YSI6IHt9LAogICAgICAibGF5b3V0IjogewogICAgICAgICJyb3dzIjogWwogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiQjFDUyIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiZDNraiIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJ0QVAzIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJ1d0xaIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIkpKX1IiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogImFMb2YiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAic2FEOCIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiMklINiIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICI1WkNYIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJsWF9mIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogZmFsc2UKICAgIH0sCiAgICAiUXhaYyI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiVGhlIEZvdW5kYXRpb24gb2YgRXRoaWNhbCBDb25kdWN0IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJCdXNpbmVzcyBldGhpY3MgY2FuIGJlIHRob3VnaHQgb2YgYXMgdGhlICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJ1bndyaXR0ZW4gcnVsZXMiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgdGhhdCBndWlkZSBob3cgY29tcGFuaWVzIGFuZCB0aGVpciBlbXBsb3llZXMgb3BlcmF0ZS4gV2hpbGUgbGVnYWwgY29tcGxpYW5jZSBzZXRzIGEgYmFzZWxpbmUsIGV0aGljcyBnb2VzIGZ1cnRoZXIsIGZvY3VzaW5nIG9uIHdoYXQgaXMgaW5oZXJlbnRseSAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAicmlnaHQiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgYW5kICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJqdXN0IiwKICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiIGluIGFsbCBidXNpbmVzcyBkZWFsaW5ncyAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiBUaGlzIGluY2x1ZGVzIGZvc3RlcmluZyBhIGN1bHR1cmUgb2YgIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogImhvbmVzdHkiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgd2l0aCBjdXN0b21lcnMsIGRlbW9uc3RyYXRpbmcgIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogInJlc3BlY3QiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgdG93YXJkcyBjb2xsZWFndWVzLCBhbmQgbWFpbnRhaW5pbmcgIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogInRyYW5zcGFyZW5jeSIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiBpbiBhbGwgb3BlcmF0aW9ucy4gVWx0aW1hdGVseSwgYnVzaW5lc3MgZXRoaWNzIGVtYm9kaWVzIHRoZSBjb3JlIHZhbHVlcyB0aGF0IGRlZmluZSBib3RoIGluZGl2aWR1YWxzIGFuZCB0aGUgb3JnYW5pemF0aW9uIHRoZXkgcmVwcmVzZW50LiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJCMFE0IjogewogICAgICAidHlwZSI6ICJxdWVzdGlvblRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAib3B0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIm5NMTQiLAogICAgICAgICAgICAidGV4dCI6ICJDb21tdW5pY2F0aW9uIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJHX1UxIiwKICAgICAgICAgICAgInRleHQiOiAiRGlnaXRhbCBFdGlxdWV0dGUiLAogICAgICAgICAgICAiY29ycmVjdCI6IGZhbHNlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIlpVSHUiLAogICAgICAgICAgICAidGV4dCI6ICJBY2NvdW50YWJpbGl0eSIsCiAgICAgICAgICAgICJjb3JyZWN0IjogdHJ1ZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIzQ2dGIiwKICAgICAgICAgICAgInRleHQiOiAiVGltZSBNYW5hZ2VtZW50IiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICJmZWVkYmFja1doZW5Db3JyZWN0IjogIiIsCiAgICAgICAgInNlbGVjdE11bHRpcGxlIjogZmFsc2UsCiAgICAgICAgImZlZWRiYWNrTW9kZSI6ICJjb3JyZWN0IC8gaW5jb3JyZWN0IiwKICAgICAgICAicXVlc3Rpb24iOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIldoaWNoIGFzcGVjdCBvZiBwcm9mZXNzaW9uYWxpc20gaW52b2x2ZXMgdGFraW5nIHJlc3BvbnNpYmlsaXR5IGZvciB5b3VyIGFjdGlvbnMgYW5kIGxlYXJuaW5nIGZyb20gbWlzdGFrZXM/IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImdyYWRlZCI6IHRydWUKICAgICAgfQogICAgfSwKICAgICJJaHNzIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJVbmRlcnN0YW5kaW5nIHRoZSBGb3VuZGF0aW9uIG9mIEJ1c2luZXNzIEV0aGljcyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICI1a1pSIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJVLVJyIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJZSzVsIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIlo2WkMiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogImxPbFIiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiOTZhMyIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAicG9GRyIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICIwNmw2IiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJGWmpKIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogZmFsc2UKICAgIH0sCiAgICAiRnJjQyI6IHsKICAgICAgInR5cGUiOiAiaW1hZ2VUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgImltYWdlIjogewogICAgICAgICAgImFsdFRleHQiOiAiQSBwcm9mZXNzaW9uYWwgc2V0dGluZyB3aXRoIHR3byBwZW9wbGUgaW4gYSBkaXNjdXNzaW9uLCBpbGx1c3RyYXRpbmcgZXRoaWNhbCBkZWNpc2lvbi1tYWtpbmcsIHdpdGggYSBzdWJ0bGUgZ2xvdyBhcm91bmQgdGhlbSwgaW4gZ3JlYXQgbGlnaHRpbmcuIiwKICAgICAgICAgICJhc3BlY3RSYXRpbyI6IDEsCiAgICAgICAgICAiaW1hZ2VJZCI6ICJ1cGxvYWRzL2MzYmRiZTdkLTFhOGMtNGY1YS04MTcxLWJkZGZmMjY3MGJhMi9nZW5lcmF0ZWQtaW1hZ2UuanBnIiwKICAgICAgICAgICJzZWFyY2hUZXJtIjogIkEgcHJvZmVzc2lvbmFsIHNldHRpbmcgd2l0aCB0d28gcGVvcGxlIGluIGEgZGlzY3Vzc2lvbiwgaWxsdXN0cmF0aW5nIGV0aGljYWwgZGVjaXNpb24tbWFraW5nLCB3aXRoIGEgc3VidGxlIGdsb3cgYXJvdW5kIHRoZW0sIGluIGdyZWF0IGxpZ2h0aW5nLiIsCiAgICAgICAgICAic291cmNlVHlwZSI6ICJHZW5lcmF0ZWQiLAogICAgICAgICAgInJpZ2h0c1R5cGUiOiAiVW5rbm93biIsCiAgICAgICAgICAibGF5b3V0IjogInJpZ2h0LWZ1bGwiLAogICAgICAgICAgInNvdXJjZSI6ICIuL2Fzc2V0cy9pbWFnZXMvaW1hZ2UtYTAwNjVkNWEtODA1My00ZjlkLWI5MTQtZmM2ZDMyOGMxZTg4LnBuZyIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRmMzYmRiZTdkLTFhOGMtNGY1YS04MTcxLWJkZGZmMjY3MGJhMiUyRmdlbmVyYXRlZC1pbWFnZS5qcGciCiAgICAgICAgfSwKICAgICAgICAib2JqZWN0Rml0IjogImNvdmVyIiwKICAgICAgICAic3RhdHVzIjogIkF2YWlsYWJsZSIKICAgICAgfQogICAgfSwKICAgICJBSWxGIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJMZXNzb24gMTogUHJvZmVzc2lvbmFsaXNtIDEwMSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJsT2xSIjogewogICAgICAidHlwZSI6ICJxdWVzdGlvblRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAib3B0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIlFEcTIiLAogICAgICAgICAgICAidGV4dCI6ICJUcnVlIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJDNGh4IiwKICAgICAgICAgICAgInRleHQiOiAiRmFsc2UiLAogICAgICAgICAgICAiY29ycmVjdCI6IHRydWUsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAiZmVlZGJhY2tXaGVuQ29ycmVjdCI6ICIiLAogICAgICAgICJzZWxlY3RNdWx0aXBsZSI6IGZhbHNlLAogICAgICAgICJmZWVkYmFja01vZGUiOiAiY29ycmVjdCAvIGluY29ycmVjdCIsCiAgICAgICAgInF1ZXN0aW9uIjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJJcyBidXNpbmVzcyBldGhpY3Mgc29sZWx5IGFib3V0IGFkaGVyaW5nIHRvIGxlZ2FsIHJlcXVpcmVtZW50cz8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiZ3JhZGVkIjogdHJ1ZQogICAgICB9CiAgICB9LAogICAgIjJJSDYiOiB7CiAgICAgICJ0eXBlIjogInF1ZXN0aW9uVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJvcHRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZU5xVyIsCiAgICAgICAgICAgICJ0ZXh0IjogIkV0aGljYWwgZXhwZWN0YXRpb25zIGFuZCBndWlkZWxpbmVzIiwKICAgICAgICAgICAgImNvcnJlY3QiOiB0cnVlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImZEd3YiLAogICAgICAgICAgICAidGV4dCI6ICJNYXJrZXRpbmcgc3RyYXRlZ2llcyIsCiAgICAgICAgICAgICJjb3JyZWN0IjogZmFsc2UsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiY1R2dCIsCiAgICAgICAgICAgICJ0ZXh0IjogIkVtcGxveWVlIHNhbGFyeSBzdHJ1Y3R1cmVzIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJ5eGxQIiwKICAgICAgICAgICAgInRleHQiOiAiQ29tcGV0aXRvciBhbmFseXNpcyIsCiAgICAgICAgICAgICJjb3JyZWN0IjogZmFsc2UsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAiZmVlZGJhY2tXaGVuQ29ycmVjdCI6ICIiLAogICAgICAgICJzZWxlY3RNdWx0aXBsZSI6IGZhbHNlLAogICAgICAgICJmZWVkYmFja01vZGUiOiAiY29ycmVjdCAvIGluY29ycmVjdCIsCiAgICAgICAgInF1ZXN0aW9uIjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJVbmRlcnN0YW5kaW5nIGEgY29tcGFueSdzIFwiQ29kZSBvZiBDb25kdWN0XCIgaXMgY3J1Y2lhbCBmb3IgY29ycG9yYXRlIHJlYWRpbmVzcyBiZWNhdXNlIGl0IG91dGxpbmVzOiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJncmFkZWQiOiB0cnVlCiAgICAgIH0KICAgIH0sCiAgICAidFdOWCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJRU0h0IjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJUaGUgQ29yZSBvZiBhIERpbGVtbWEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkFuIGV0aGljYWwgZGlsZW1tYSBwcmVzZW50cyBhIHNpdHVhdGlvbiB3aGVyZSB5b3UgbXVzdCBjaG9vc2UgYmV0d2VlbiB0d28gb3IgbW9yZSBhY3Rpb25zLCBlYWNoIG9mIHdoaWNoIGlzICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJtb3JhbGx5IGRlZmVuc2libGUiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgYnV0IGNvbWVzIHdpdGggaXRzIG93biAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAidW5kZXNpcmFibGUgY29uc2VxdWVuY2VzIiwKICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiBVbmxpa2UgYSBzaW1wbGUgcmlnaHQtdmVyc3VzLXdyb25nIGNob2ljZSwgYSBkaWxlbW1hIGZvcmNlcyB5b3UgdG8gd2VpZ2ggY29tcGV0aW5nIFwicmlnaHRzLlwiIEZvciBpbnN0YW5jZSwgeW91IG1pZ2h0IGZhY2UgYSBjb25mbGljdCBiZXR3ZWVuICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJsb3lhbHR5IHRvIGEgY293b3JrZXIiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgd2hvIG1hZGUgYSBtaXN0YWtlIGFuZCB5b3VyICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJkdXR5IHRvIGJlIGhvbmVzdCIsCiAgICAgICAgICAgICAgICAgICJtYXJrcyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib2xkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIiB3aXRoIHlvdXIgbWFuYWdlciBhYm91dCB0aGUgaW5jaWRlbnQgWzNdLiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJyQjRTIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogIntcbiAgXCI6QFwiOiB7XG4gICAgXCJpXCI6IFwiMFwiXG4gIH1cbn0iLAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJWZmczIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICIyQlR4IiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICI0Z3lDIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIm5CbVoiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIlFTSHQiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiVDZEUyIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IDAuNTYyNSwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjcsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIkVRZE4iLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiR2lhciIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiZzJBTCIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJ2WDFEIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICIyS0lqIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogZmFsc2UKICAgIH0sCiAgICAia1lMSCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJUaGlzIGNoZWNrcG9pbnQgb2ZmZXJzIGFuIG9wcG9ydHVuaXR5IGZvciB5b3UgdG8gcGF1c2UgYW5kIGNvbnNpZGVyIGhvdyB5b3UgY2FuIGFwcGx5IHRoZSBjb25jZXB0cyBvZiBjb3Jwb3JhdGUgcmVhZGluZXNzIHRvIHlvdXIgb3duIHByb2Zlc3Npb25hbCBqb3VybmV5LiBSZWZsZWN0IG9uIHRoZSBpbnNpZ2h0cyBnYWluZWQgYWJvdXQgcHJvZmVzc2lvbmFsaXNtLCBhZGFwdGFiaWxpdHksIGFuZCBldGhpY2FsIGNvbmR1Y3QuIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJub25lIgogICAgICB9CiAgICB9LAogICAgIl8xb18iOiB7CiAgICAgICJ0eXBlIjogInRpbGVkTGF5b3V0IiwKICAgICAgImRhdGEiOiB7fSwKICAgICAgImxheW91dCI6IHsKICAgICAgICAicm93cyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogImxSMDQiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogInNXajUiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiR2Z5eCIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IDAuNTYyNSwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjcsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIi00dGkiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiLW1CNiIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiLXNGUiIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJKM0x1IiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJmcjFhIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIlJreUEiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIndfQXQiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAic2VjdGlvbkRpdmlkZXIiOiBmYWxzZQogICAgfSwKICAgICJmS1NBIjogewogICAgICAidHlwZSI6ICJkaWFsb2d1ZU5vZGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAic2NlbmUiOiB7CiAgICAgICAgICAiaWQiOiAiaUpaZyIKICAgICAgICB9LAogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkZpbmFsbHksIGxldCdzIGFwcGx5IHRoZSAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiQ29uc2VxdWVuY2VzIFRlc3QiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIuIFdoYXQgYXJlIHRoZSBwb3RlbnRpYWwgc2hvcnQtdGVybSBhbmQgbG9uZy10ZXJtIGltcGFjdHMgb2Ygc2tpcHBpbmcgcXVhbGl0eSB0ZXN0aW5nLCBub3QganVzdCBmb3IgdGhlIGNsaWVudCwgYnV0IGZvciBvdXIgdGVhbSBhbmQgdGhlIGNvbXBhbnkgYXMgYSB3aG9sZT8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiY2hhcmFjdGVyUG9zZSI6IHsKICAgICAgICAgICJ0eXBlIjogInVwbG9hZGVkIiwKICAgICAgICAgICJpbWFnZSI6IHsKICAgICAgICAgICAgInNvdXJjZSI6ICJhc3NldHMvaW1hZ2VzL3NvcGhpYS10aGlua2luZy5wbmciLAogICAgICAgICAgICAiYWx0VGV4dCI6ICJzb3BoaWEgdGhpbmtpbmciLAogICAgICAgICAgICAicmlnaHRzVHlwZSI6ICJVbmtub3duIiwKICAgICAgICAgICAgInNvdXJjZVR5cGUiOiAiVW5rbm93biIsCiAgICAgICAgICAgICJhc3BlY3RSYXRpbyI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICAibGF5b3V0IjogImRlZmF1bHQiCiAgICAgICAgfSwKICAgICAgICAib3B0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5leHQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAibm9kZSIsCiAgICAgICAgICAgICAgImlkIjogImJnZ2UiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiVGhlIG1haW4gY29uc2VxdWVuY2UgaXMgd2UgbWVldCB0aGUgZGVhZGxpbmUsIHdoaWNoIGlzIGEgaHVnZSB3aW4gZm9yIHRoZSB0ZWFtIHJpZ2h0IG5vdy4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZmVlZGJhY2siOiAiV2hpbGUgbWVldGluZyBkZWFkbGluZXMgaXMgYSBzaG9ydC10ZXJtIGJlbmVmaXQsIGl0J3Mgdml0YWwgdG8gY29uc2lkZXIgYWxsIHBvdGVudGlhbCBjb25zZXF1ZW5jZXMsIGVzcGVjaWFsbHkgdGhlIGxvbmctdGVybSBuZWdhdGl2ZSBpbXBhY3RzIG9uIHJlcHV0YXRpb24sIHRydXN0LCBhbmQgZXZlbiBsZWdhbCBzdGFuZGluZy4iLAogICAgICAgICAgICAiaWQiOiAiYk1McSIsCiAgICAgICAgICAgICJjaGFyYWN0ZXJSZWFjdGlvbiI6IHsKICAgICAgICAgICAgICAiY2hhcmFjdGVySWQiOiAiZXJpYyIsCiAgICAgICAgICAgICAgImVtb3Rpb24iOiAiZGlzYXBwb2ludGVkIiwKICAgICAgICAgICAgICAidHlwZSI6ICJwcmVzZXQiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuZXh0IjogewogICAgICAgICAgICAgICJ0eXBlIjogImNvbXBsZXRlIiwKICAgICAgICAgICAgICAicmVzdWx0IjogImNvcnJlY3QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiU2hvcnQtdGVybSwgd2UgbWlnaHQgaGl0IHRoZSBkZWFkbGluZSwgYnV0IGxvbmctdGVybSwgd2UgcmlzayBwcm9kdWN0IGZhaWx1cmUsIGNsaWVudCBsYXdzdWl0cywgcmVwdXRhdGlvbmFsIGRhbWFnZSwgYW5kIGEgZGVjbGluZSBpbiB0ZWFtIG1vcmFsZSBhbmQgdHJ1c3QgaW4gb3VyIG93biB3b3JrLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmZWVkYmFjayI6ICJFeGNlbGxlbnQgZm9yZXNpZ2h0LiBVbmRlcnN0YW5kaW5nIHRoZSBmdWxsIHNwZWN0cnVtIG9mIGNvbnNlcXVlbmNlcyBpcyBjcnVjaWFsIGZvciByZXNwb25zaWJsZSBkZWNpc2lvbi1tYWtpbmcgWzEuM10oY2l0ZSBcIjFcIikuIiwKICAgICAgICAgICAgImlkIjogImV3Yl8iLAogICAgICAgICAgICAiY2hhcmFjdGVyUmVhY3Rpb24iOiB7CiAgICAgICAgICAgICAgImNoYXJhY3RlcklkIjogImVyaWMiLAogICAgICAgICAgICAgICJlbW90aW9uIjogImFsYXJtZWQiLAogICAgICAgICAgICAgICJ0eXBlIjogInByZXNldCIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJhbmRvbWl6ZU9wdGlvbnMiOiB0cnVlLAogICAgICAgICJzaG93TWVzc2FnZUhpc3RvcnkiOiB0cnVlCiAgICAgIH0sCiAgICAgICJwb3NpdGlvbiI6IHsKICAgICAgICAieCI6IDc1MDAsCiAgICAgICAgInkiOiA2MDAKICAgICAgfSwKICAgICAgInBhcmVudElkIjogIlB1U2YiCiAgICB9LAogICAgInNXajUiOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlJlYWwtV29ybGQgRXRoaWNhbCBEaWxlbW1hOiBNaXNsZWFkaW5nIFNhbGVzIFRhY3RpY3MiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogInRpdGxlIgogICAgICB9CiAgICB9LAogICAgIlN6NVkiOiB7CiAgICAgICJ0eXBlIjogInF1ZXN0aW9uVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJvcHRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiVFhJVyIsCiAgICAgICAgICAgICJ0ZXh0IjogIlRoZSBHb2xkZW4gUnVsZSBUZXN0IiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJ4d0t1IiwKICAgICAgICAgICAgInRleHQiOiAiVGhlIENvbnNlcXVlbmNlcyBUZXN0IiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJ6SkZOIiwKICAgICAgICAgICAgInRleHQiOiAiVHJhbnNwYXJlbmN5IFRlc3QiLAogICAgICAgICAgICAiY29ycmVjdCI6IGZhbHNlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImJDSWUiLAogICAgICAgICAgICAidGV4dCI6ICJUaGUgRmluYW5jaWFsIEdhaW4gVGVzdCIsCiAgICAgICAgICAgICJjb3JyZWN0IjogdHJ1ZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICJmZWVkYmFja1doZW5Db3JyZWN0IjogIiIsCiAgICAgICAgInNlbGVjdE11bHRpcGxlIjogZmFsc2UsCiAgICAgICAgImZlZWRiYWNrTW9kZSI6ICJjb3JyZWN0IC8gaW5jb3JyZWN0IiwKICAgICAgICAicXVlc3Rpb24iOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIldoaWNoIG9mIHRoZSBmb2xsb3dpbmcgaXMgTk9UIGEgcGFydCBvZiB0aGUgZnJhbWV3b3JrIGZvciBldGhpY2FsIGRlY2lzaW9ucz8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiZ3JhZGVkIjogdHJ1ZQogICAgICB9CiAgICB9LAogICAgIjNPNnUiOiB7CiAgICAgICJ0eXBlIjogInRleHROb2RlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiSSB1bmRlcnN0YW5kIHRoZSB1cmdlbmN5LCBidXQgc2FjcmlmaWNpbmcgcXVhbGl0eSB0ZXN0aW5nIGNvdWxkIHNldmVyZWx5IGRhbWFnZSBvdXIgcmVwdXRhdGlvbiBhbmQgY2xpZW50IHRydXN0IGluIHRoZSBsb25nIHJ1bi4gTGV0J3MgcmVjb25zaWRlci4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAibmV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogIm5vZGUiLAogICAgICAgICAgImlkIjogInpJemkiCiAgICAgICAgfSwKICAgICAgICAiY2hhcmFjdGVyUG9zZSI6IHsKICAgICAgICAgICJjaGFyYWN0ZXJJZCI6ICJlcmljIiwKICAgICAgICAgICJlbW90aW9uIjogImRpc2FwcG9pbnRlZCIsCiAgICAgICAgICAidHlwZSI6ICJwcmVzZXQiCiAgICAgICAgfSwKICAgICAgICAic2NlbmUiOiB7CiAgICAgICAgICAiaWQiOiAiaUpaZyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJwb3NpdGlvbiI6IHsKICAgICAgICAieCI6IDEyNTAsCiAgICAgICAgInkiOiAwCiAgICAgIH0sCiAgICAgICJwYXJlbnRJZCI6ICJQdVNmIgogICAgfSwKICAgICJzWWNrIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJSZXNvdXJjZXMgZm9yIERlZXBlciBMZWFybmluZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAidGl0bGUiCiAgICAgIH0KICAgIH0sCiAgICAiNGd5QyI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiV2hhdCBpcyBhbiBFdGhpY2FsIERpbGVtbWE/IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJ0aXRsZSIKICAgICAgfQogICAgfSwKICAgICJ2V2tMIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJNb2R1bGUgMzogQ29ycG9yYXRlIFJlYWRpbmVzcyBpbiBBY3Rpb24iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogInRpdGxlIgogICAgICB9CiAgICB9LAogICAgIi1uV0YiOiB7CiAgICAgICJ0eXBlIjogImltYWdlVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJpbWFnZSI6IHsKICAgICAgICAgICJhbHRUZXh0IjogIkEgYnJpZ2h0bHkgbGl0LCBwcm9mZXNzaW9uYWwgaW1hZ2Ugb2YgYSBzaW5nbGUgcGVyc29uIGF0IGEgZGVzaywgY29udGVtcGxhdGluZyB0d28gZGlzdGluY3QgcGF0aHMsIHN5bWJvbGl6aW5nIGFuIGV0aGljYWwgZGVjaXNpb24gaW4gYSBidXNpbmVzcyBjb250ZXh0LiIsCiAgICAgICAgICAiYXNwZWN0UmF0aW8iOiAxLAogICAgICAgICAgImltYWdlSWQiOiAidXBsb2Fkcy8zZDAzZjM0Yy05YTIyLTQyMTEtOGUwOC1mNTM1ZWM5NmZmMmMvZ2VuZXJhdGVkLWltYWdlLmpwZyIsCiAgICAgICAgICAic2VhcmNoVGVybSI6ICJBIGJyaWdodGx5IGxpdCwgcHJvZmVzc2lvbmFsIGltYWdlIG9mIGEgc2luZ2xlIHBlcnNvbiBhdCBhIGRlc2ssIGNvbnRlbXBsYXRpbmcgdHdvIGRpc3RpbmN0IHBhdGhzLCBzeW1ib2xpemluZyBhbiBldGhpY2FsIGRlY2lzaW9uIGluIGEgYnVzaW5lc3MgY29udGV4dC4iLAogICAgICAgICAgInNvdXJjZVR5cGUiOiAiR2VuZXJhdGVkIiwKICAgICAgICAgICJyaWdodHNUeXBlIjogIlVua25vd24iLAogICAgICAgICAgImxheW91dCI6ICJyaWdodC1mdWxsIiwKICAgICAgICAgICJzb3VyY2UiOiAiLi9hc3NldHMvaW1hZ2VzL2ltYWdlLWNhYzYyNTlkLWUxY2ItNDE0MC1iYWRiLTk1MjBlNzVkM2RjNi5wbmciLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbWluZHNtaXRoL3VwbG9hZHMlMkYzZDAzZjM0Yy05YTIyLTQyMTEtOGUwOC1mNTM1ZWM5NmZmMmMlMkZnZW5lcmF0ZWQtaW1hZ2UuanBnIgogICAgICAgIH0sCiAgICAgICAgIm9iamVjdEZpdCI6ICJjb3ZlciIsCiAgICAgICAgInN0YXR1cyI6ICJBdmFpbGFibGUiCiAgICAgIH0KICAgIH0sCiAgICAidlY4SCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiQmV5b25kIFNraWxsczogVGhlIEVzc2VuY2Ugb2YgQ29ycG9yYXRlIFJlYWRpbmVzcyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiSW4gdGhlIGNvbXBldGl0aXZlIGNvcnBvcmF0ZSB3b3JsZCwgbWVyZWx5IHBvc3Nlc3NpbmcgdGVjaG5pY2FsIHNraWxscyBpc24ndCBlbm91Z2guIFRydWUgY29ycG9yYXRlIHJlYWRpbmVzcyBleHRlbmRzIHRvICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJob3cgeW91IGNvbmR1Y3QgeW91cnNlbGYiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICLigJR5b3VyIHByb2Zlc3Npb25hbCBkZW1lYW5vciwgaW50ZXJhY3Rpb25zLCBhbmQgb3ZlcmFsbCBhcHByb2FjaCB0byB3b3JrLiBJdCdzIGFib3V0IGRlbW9uc3RyYXRpbmcgYSBjb25zaXN0ZW50IGxldmVsIG9mIHByb2Zlc3Npb25hbGlzbSB0aGF0IGJ1aWxkcyB0cnVzdCBhbmQgZm9zdGVycyBhIHByb2R1Y3RpdmUgZW52aXJvbm1lbnQgIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIi4gVGhpcyBzZWN0aW9uIHdpbGwgZGVsdmUgaW50byB0aGUgZnVuZGFtZW50YWwgcGlsbGFycyB0aGF0IGRlZmluZSBhIHRydWx5IHByZXBhcmVkIHByb2Zlc3Npb25hbC4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogIm5vbmUiCiAgICAgIH0KICAgIH0sCiAgICAiM1JtbCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiVG9vbHMvUmVzb3VyY2VzOiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJRM2NMIjogewogICAgICAidHlwZSI6ICJ0aWxlZExheW91dCIsCiAgICAgICJkYXRhIjoge30sCiAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgInJvd3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJXVS1HIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJQa05BIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogInI5dUoiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogInc1UE8iLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiWXh2MSIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IDAuNTYyNSwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjcsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogIndPR28iLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAibEtQdyIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiS3pZVSIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJ5bS1SIiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJIVmJHIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogZmFsc2UKICAgIH0sCiAgICAicG9GRyI6IHsKICAgICAgInR5cGUiOiAicXVlc3Rpb25UaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgIm9wdGlvbnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJybFVSIiwKICAgICAgICAgICAgInRleHQiOiAiRm9jdXNpbmcgZXhjbHVzaXZlbHkgb24gbWF4aW1pemluZyBpbW1lZGlhdGUgcHJvZml0cyIsCiAgICAgICAgICAgICJjb3JyZWN0IjogZmFsc2UsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMFRuayIsCiAgICAgICAgICAgICJ0ZXh0IjogIkV4cGVyaWVuY2luZyBhIHJpc2UgaW4gZW1wbG95ZWUgZGVwYXJ0dXJlcyIsCiAgICAgICAgICAgICJjb3JyZWN0IjogZmFsc2UsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiRURNNyIsCiAgICAgICAgICAgICJ0ZXh0IjogIkJ1aWxkaW5nIGEgc3Ryb25nZXIgYnJhbmQgaW1hZ2UgYW5kIGZvc3RlcmluZyBjdXN0b21lciBsb3lhbHR5IiwKICAgICAgICAgICAgImNvcnJlY3QiOiB0cnVlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIkdrUnUiLAogICAgICAgICAgICAidGV4dCI6ICJHdWFyYW50ZWVpbmcgdGhlIGNvbXBsZXRlIGVsaW1pbmF0aW9uIG9mIGFsbCBidXNpbmVzcyByaXNrcyIsCiAgICAgICAgICAgICJjb3JyZWN0IjogZmFsc2UsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAiZmVlZGJhY2tXaGVuQ29ycmVjdCI6ICIiLAogICAgICAgICJzZWxlY3RNdWx0aXBsZSI6IGZhbHNlLAogICAgICAgICJmZWVkYmFja01vZGUiOiAiY29ycmVjdCAvIGluY29ycmVjdCIsCiAgICAgICAgInF1ZXN0aW9uIjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJXaGljaCBvZiB0aGUgZm9sbG93aW5nIGlzIGEgc2lnbmlmaWNhbnQgYWR2YW50YWdlIG9mIHVwaG9sZGluZyBldGhpY2FsIGJ1c2luZXNzIHByYWN0aWNlcz8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiZ3JhZGVkIjogdHJ1ZQogICAgICB9CiAgICB9LAogICAgImQza2oiOiB7CiAgICAgICJ0eXBlIjogInF1ZXN0aW9uVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJvcHRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiaXF6YiIsCiAgICAgICAgICAgICJ0ZXh0IjogIkd1YXJhbnRlZWQgbWFya2V0IG1vbm9wb2x5IiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIxNmpSIiwKICAgICAgICAgICAgInRleHQiOiAiRGVjcmVhc2VkIG9wZXJhdGlvbmFsIGNvc3RzIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJoVEYxIiwKICAgICAgICAgICAgInRleHQiOiAiUmFwaWQgc2hvcnQtdGVybSBwcm9maXQgbWF4aW1pemF0aW9uIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI5aHpWIiwKICAgICAgICAgICAgInRleHQiOiAiRW5oYW5jZWQgc3Rha2Vob2xkZXIgdHJ1c3QgYW5kIHN1c3RhaW5lZCByZXB1dGF0aW9uIiwKICAgICAgICAgICAgImNvcnJlY3QiOiB0cnVlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgImZlZWRiYWNrV2hlbkNvcnJlY3QiOiAiIiwKICAgICAgICAic2VsZWN0TXVsdGlwbGUiOiBmYWxzZSwKICAgICAgICAiZmVlZGJhY2tNb2RlIjogImNvcnJlY3QgLyBpbmNvcnJlY3QiLAogICAgICAgICJxdWVzdGlvbiI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiV2hpY2ggb2YgdGhlIGZvbGxvd2luZyBiZXN0IGRlc2NyaWJlcyB0aGUgbG9uZy10ZXJtIGltcGFjdCBvZiBjb25zaXN0ZW50bHkgdXBob2xkaW5nIHN0cm9uZyBidXNpbmVzcyBldGhpY3M/IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImdyYWRlZCI6IHRydWUKICAgICAgfQogICAgfSwKICAgICJiRjhrIjogewogICAgICAidHlwZSI6ICJkaWFsb2d1ZU5vZGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAic2NlbmUiOiB7CiAgICAgICAgICAiaWQiOiAiaUpaZyIKICAgICAgICB9LAogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlNvcGhpYSwgdGhlIGRlYWRsaW5lIGZvciB0aGUgJ1Bob2VuaXgnIHByb2plY3QgaXMgbG9vbWluZywgYW5kIHdlJ3JlIHNpZ25pZmljYW50bHkgYmVoaW5kLiBJJ3ZlIGJlZW4gdGhpbmtpbmcsIGlmIHdlIGp1c3Qgc2tpcCBzb21lIG9mIHRoZSBmaW5hbCBxdWFsaXR5IHRlc3RpbmcsIHdlIGNvdWxkIHByb2JhYmx5IG1ha2UgaXQuIFRoZSBjbGllbnQgbWlnaHQgbm90IGV2ZW4gbm90aWNlLCBhdCBsZWFzdCBub3QgcmlnaHQgYXdheS4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiY2hhcmFjdGVyUG9zZSI6IHsKICAgICAgICAgICJ0eXBlIjogInVwbG9hZGVkIiwKICAgICAgICAgICJpbWFnZSI6IHsKICAgICAgICAgICAgInNvdXJjZSI6ICJhc3NldHMvaW1hZ2VzL2VyaWMtd29ycmllZC5wbmciLAogICAgICAgICAgICAiYWx0VGV4dCI6ICJlcmljIHdvcnJpZWQiLAogICAgICAgICAgICAicmlnaHRzVHlwZSI6ICJVbmtub3duIiwKICAgICAgICAgICAgInNvdXJjZVR5cGUiOiAiVW5rbm93biIsCiAgICAgICAgICAgICJhc3BlY3RSYXRpbyI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICAibGF5b3V0IjogImRlZmF1bHQiCiAgICAgICAgfSwKICAgICAgICAib3B0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5leHQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAibm9kZSIsCiAgICAgICAgICAgICAgImlkIjogIjNPNnUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiVGhhdCdzIGEgdGVtcHRpbmcgaWRlYSwgRXJpYy4gV2UgcmVhbGx5IG5lZWQgdG8gaGl0IHRoaXMgZGVhZGxpbmUuIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIldoaWxlIG1lZXRpbmcgZGVhZGxpbmVzIGlzIGltcG9ydGFudCwgcHJpb3JpdGl6aW5nIGl0IG92ZXIgcXVhbGl0eSBjYW4gbGVhZCB0byBiaWdnZXIgcHJvYmxlbXMuIFRoaW5rIGFib3V0IHRoZSBldGhpY2FsIGltcGxpY2F0aW9ucy4iLAogICAgICAgICAgICAiaWQiOiAicU9BQSIsCiAgICAgICAgICAgICJjaGFyYWN0ZXJSZWFjdGlvbiI6IHsKICAgICAgICAgICAgICAiY2hhcmFjdGVySWQiOiAiZXJpYyIsCiAgICAgICAgICAgICAgImVtb3Rpb24iOiAiZGlzYXBwb2ludGVkIiwKICAgICAgICAgICAgICAidHlwZSI6ICJwcmVzZXQiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuZXh0IjogewogICAgICAgICAgICAgICJ0eXBlIjogIm5vZGUiLAogICAgICAgICAgICAgICJpZCI6ICJ6SXppIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkVyaWMsIEkgdW5kZXJzdGFuZCB0aGUgcHJlc3N1cmUsIGJ1dCBjb21wcm9taXNpbmcgb24gcXVhbGl0eSB0ZXN0aW5nIGNvdWxkIGhhdmUgc2VyaW91cyByZXBlcmN1c3Npb25zLiBXZSBuZWVkIHRvIGNvbnNpZGVyIHRoZSBmdWxsIHBpY3R1cmUuIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIkV4Y2VsbGVudC4gQWNrbm93bGVkZ2luZyB0aGUgcHJlc3N1cmUgd2hpbGUgaW1tZWRpYXRlbHkgZmxhZ2dpbmcgdGhlIGV0aGljYWwgY29uY2VybiBzZXRzIHRoZSByaWdodCB0b25lLiIsCiAgICAgICAgICAgICJpZCI6ICJTLUpiIiwKICAgICAgICAgICAgImNoYXJhY3RlclJlYWN0aW9uIjogewogICAgICAgICAgICAgICJjaGFyYWN0ZXJJZCI6ICJlcmljIiwKICAgICAgICAgICAgICAiZW1vdGlvbiI6ICJ0aGlua2luZyIsCiAgICAgICAgICAgICAgInR5cGUiOiAicHJlc2V0IgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicmFuZG9taXplT3B0aW9ucyI6IHRydWUsCiAgICAgICAgInNob3dNZXNzYWdlSGlzdG9yeSI6IHRydWUKICAgICAgfSwKICAgICAgInBvc2l0aW9uIjogewogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDAKICAgICAgfSwKICAgICAgInBhcmVudElkIjogIlB1U2YiCiAgICB9LAogICAgInBweGYiOiB7CiAgICAgICJ0eXBlIjogInRleHRUaWxlIiwKICAgICAgImRhdGEiOiB7CiAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAianVzdGlmeSI6ICJsZWZ0IiwKICAgICAgICAiYWxpZ24iOiAiY2VudGVyIiwKICAgICAgICAiY2FwV2lkdGgiOiBudWxsLAogICAgICAgICJ0ZXh0QWRvcm5tZW50IjogInRpdGxlIgogICAgICB9CiAgICB9LAogICAgIlhTX1QiOiB7CiAgICAgICJ0eXBlIjogInF1ZXN0aW9uVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJvcHRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiSmkxSyIsCiAgICAgICAgICAgICJ0ZXh0IjogIkluY3JlYXNlZCBjdXN0b21lciBsb3lhbHR5IiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJmYmhGIiwKICAgICAgICAgICAgInRleHQiOiAiRW5oYW5jZWQgZW1wbG95ZWUgcmV0ZW50aW9uIiwKICAgICAgICAgICAgImNvcnJlY3QiOiBmYWxzZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJQTjJkIiwKICAgICAgICAgICAgInRleHQiOiAiUmVkdWNlZCBsZWdhbCByaXNrcyIsCiAgICAgICAgICAgICJjb3JyZWN0IjogZmFsc2UsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMkd2WSIsCiAgICAgICAgICAgICJ0ZXh0IjogIkd1YXJhbnRlZWQgbWFya2V0IGRvbWluYW5jZSIsCiAgICAgICAgICAgICJjb3JyZWN0IjogdHJ1ZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICJmZWVkYmFja1doZW5Db3JyZWN0IjogIiIsCiAgICAgICAgInNlbGVjdE11bHRpcGxlIjogZmFsc2UsCiAgICAgICAgImZlZWRiYWNrTW9kZSI6ICJjb3JyZWN0IC8gaW5jb3JyZWN0IiwKICAgICAgICAicXVlc3Rpb24iOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIldoaWNoIG9mIHRoZSBmb2xsb3dpbmcgaXMgTk9UIGEgZGlyZWN0IGJlbmVmaXQgb2Ygc3Ryb25nIGJ1c2luZXNzIGV0aGljcz8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiZ3JhZGVkIjogdHJ1ZQogICAgICB9CiAgICB9LAogICAgIjJLSWoiOiB7CiAgICAgICJ0eXBlIjogInF1ZXN0aW9uVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJvcHRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiRDlTayIsCiAgICAgICAgICAgICJ0ZXh0IjogIkEgc2l0dWF0aW9uIHdoZXJlIGxlZ2FsIGNvbXBsaWFuY2UgaXMgdGhlIG9ubHkgY29uc2lkZXJhdGlvbi4iLAogICAgICAgICAgICAiY29ycmVjdCI6IGZhbHNlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIkZMVzEiLAogICAgICAgICAgICAidGV4dCI6ICJBIGNob2ljZSBiZXR3ZWVuIGEgY2xlYXJseSByaWdodCBhbmQgYSBjbGVhcmx5IHdyb25nIGFjdGlvbi4iLAogICAgICAgICAgICAiY29ycmVjdCI6IGZhbHNlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImNqSUoiLAogICAgICAgICAgICAidGV4dCI6ICJBIGNob2ljZSBiZXR3ZWVuIHR3byBvciBtb3JlIG1vcmFsbHkgZ29vZCBhY3Rpb25zLCBlYWNoIHdpdGggcG90ZW50aWFsIG5lZ2F0aXZlIG91dGNvbWVzLiIsCiAgICAgICAgICAgICJjb3JyZWN0IjogdHJ1ZSwKICAgICAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgICAgICJpbWFnZSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJOT0doIiwKICAgICAgICAgICAgInRleHQiOiAiQW55IHNpdHVhdGlvbiB0aGF0IGNhdXNlcyBkaXNjb21mb3J0IG9yIHN0cmVzcy4iLAogICAgICAgICAgICAiY29ycmVjdCI6IGZhbHNlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgImZlZWRiYWNrV2hlbkNvcnJlY3QiOiAiIiwKICAgICAgICAic2VsZWN0TXVsdGlwbGUiOiBmYWxzZSwKICAgICAgICAiZmVlZGJhY2tNb2RlIjogImNvcnJlY3QgLyBpbmNvcnJlY3QiLAogICAgICAgICJxdWVzdGlvbiI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiV2hhdCBkZWZpbmVzIGFuIGV0aGljYWwgZGlsZW1tYT8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiZ3JhZGVkIjogdHJ1ZQogICAgICB9CiAgICB9LAogICAgImxfRS0iOiB7CiAgICAgICJ0eXBlIjogInF1ZXN0aW9uVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJvcHRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZkdjdiIsCiAgICAgICAgICAgICJ0ZXh0IjogIkV0aGljcyBpcyBvbmx5IHJlbGV2YW50IGZvciBsYXJnZSBjb3Jwb3JhdGlvbnMsIHdoaWxlIGxlZ2FsIGNvbXBsaWFuY2UgYXBwbGllcyB0byBhbGwgYnVzaW5lc3Nlcy4iLAogICAgICAgICAgICAiY29ycmVjdCI6IGZhbHNlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIi1MdVAiLAogICAgICAgICAgICAidGV4dCI6ICJMZWdhbCBjb21wbGlhbmNlIGludm9sdmVzIGZvbGxvd2luZyB3cml0dGVuIGxhd3MsIHdoZXJlYXMgZXRoaWNzIGludm9sdmVzIGFkaGVyaW5nIHRvIGEgYnJvYWRlciBzZW5zZSBvZiB3aGF0IGlzIG1vcmFsbHkgcmlnaHQuIiwKICAgICAgICAgICAgImNvcnJlY3QiOiB0cnVlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjdON28iLAogICAgICAgICAgICAidGV4dCI6ICJUaGVyZSBpcyBubyBkaXN0aW5jdGlvbjsgdGhleSBhcmUgaW50ZXJjaGFuZ2VhYmxlIGNvbmNlcHRzIGluIGJ1c2luZXNzLiIsCiAgICAgICAgICAgICJjb3JyZWN0IjogZmFsc2UsCiAgICAgICAgICAgICJmZWVkYmFjayI6ICIiLAogICAgICAgICAgICAiaW1hZ2UiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiUlZmZiIsCiAgICAgICAgICAgICJ0ZXh0IjogIkxlZ2FsIGNvbXBsaWFuY2UgZm9jdXNlcyBvbiBhdm9pZGluZyBmaW5lcywgd2hpbGUgZXRoaWNzIGZvY3VzZXMgb24gcHVibGljIHJlbGF0aW9ucy4iLAogICAgICAgICAgICAiY29ycmVjdCI6IGZhbHNlLAogICAgICAgICAgICAiZmVlZGJhY2siOiAiIiwKICAgICAgICAgICAgImltYWdlIjogbnVsbAogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImZlZWRiYWNrIjogIiIsCiAgICAgICAgImZlZWRiYWNrV2hlbkNvcnJlY3QiOiAiIiwKICAgICAgICAic2VsZWN0TXVsdGlwbGUiOiBmYWxzZSwKICAgICAgICAiZmVlZGJhY2tNb2RlIjogImNvcnJlY3QgLyBpbmNvcnJlY3QiLAogICAgICAgICJxdWVzdGlvbiI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiV2hhdCBpcyB0aGUgcHJpbWFyeSBkaXN0aW5jdGlvbiBiZXR3ZWVuIGxlZ2FsIGNvbXBsaWFuY2UgYW5kIGJ1c2luZXNzIGV0aGljcz8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiZ3JhZGVkIjogdHJ1ZQogICAgICB9CiAgICB9LAogICAgIjF2aU0iOiB7CiAgICAgICJ0eXBlIjogInRpbGVkTGF5b3V0IiwKICAgICAgImRhdGEiOiB7fSwKICAgICAgImxheW91dCI6IHsKICAgICAgICAicm93cyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInJvd0lkIjogIjJnNUIiLAogICAgICAgICAgICAicmVsYXRpdmVIZWlnaHQiOiBudWxsLAogICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogInBweGYiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiVHNDcyIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IDAuNTYyNSwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAwLjcsCiAgICAgICAgICAgICJ0aWxlcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGlsZUlkIjogInNZYWYiLAogICAgICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicm93SWQiOiAiOGxjUiIsCiAgICAgICAgICAgICJyZWxhdGl2ZUhlaWdodCI6IG51bGwsCiAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMSwKICAgICAgICAgICAgInRpbGVzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0aWxlSWQiOiAiazVQZiIsCiAgICAgICAgICAgICAgICAicmVsYXRpdmVXaWR0aCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyb3dJZCI6ICJTXzd5IiwKICAgICAgICAgICAgInJlbGF0aXZlSGVpZ2h0IjogbnVsbCwKICAgICAgICAgICAgInJlbGF0aXZlV2lkdGgiOiAxLAogICAgICAgICAgICAidGlsZXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRpbGVJZCI6ICJYelVaIiwKICAgICAgICAgICAgICAgICJyZWxhdGl2ZVdpZHRoIjogMQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgInNlY3Rpb25EaXZpZGVyIjogZmFsc2UKICAgIH0sCiAgICAiLVQ2aiI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiUHJvZmVzc2lvbmFsaXNtIGluIFByYWN0aWNlOiBBbiBJbnRlcm4ncyBKb3VybmV5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICAgImxldmVsIjogMwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJDb25zaWRlciB0d28gaW50ZXJuczogb25lIHdobyBmcmVxdWVudGx5IGFycml2ZXMgbGF0ZSwgc2VuZHMgZW1haWxzIHJpZGRsZWQgd2l0aCBlcnJvcnMsIGFuZCBoYXMgYSBwdWJsaWMgc29jaWFsIG1lZGlhIHByb2ZpbGUgZGlzcGxheWluZyB1bnByb2Zlc3Npb25hbCBjb250ZW50LiBEZXNwaXRlIHRoZWlyIGFjYWRlbWljIGludGVsbGlnZW5jZSwgdGhpcyBpbnRlcm4gd2lsbCBsaWtlbHkgYmUgcGVyY2VpdmVkIGFzICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJsYWNraW5nIGNvcnBvcmF0ZSByZWFkaW5lc3MiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIuIEluIHN0YXJrIGNvbnRyYXN0LCBhbiBpbnRlcm4gd2hvIGNvbnNpc3RlbnRseSBkZW1vbnN0cmF0ZXMgcHVuY3R1YWxpdHksIGNvbW11bmljYXRlcyB3aXRoIGNsYXJpdHkgYW5kIHJlc3BlY3QsIGFuZCBwcm9hY3RpdmVseSB0YWtlcyBvd25lcnNoaXAgb2YgdGhlaXIgdGFza3Mgd2lsbCBiZSB2aWV3ZWQgYXMgYSAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAidmFsdWFibGUgYXNzZXQiLAogICAgICAgICAgICAgICAgICAibWFya3MiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9sZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIgYW5kIGEgc3Ryb25nIGNhbmRpZGF0ZSBmb3IgZnV0dXJlIG9wcG9ydHVuaXRpZXMuIFRoaXMgaGlnaGxpZ2h0cyB0aGF0IHByb2Zlc3Npb25hbGlzbSBpcyBvZnRlbiBhcyBjcnVjaWFsIGFzLCBpZiBub3QgbW9yZSB0aGFuLCB0ZWNobmljYWwgYXB0aXR1ZGUgaW4gc2hhcGluZyBjYXJlZXIgdHJhamVjdG9yaWVzICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICIuIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImp1c3RpZnkiOiAibGVmdCIsCiAgICAgICAgImFsaWduIjogImNlbnRlciIsCiAgICAgICAgImNhcFdpZHRoIjogbnVsbCwKICAgICAgICAidGV4dEFkb3JubWVudCI6ICJub25lIgogICAgICB9CiAgICB9LAogICAgIks5U0EiOiB7CiAgICAgICJ0eXBlIjogImltYWdlVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJpbWFnZSI6IHsKICAgICAgICAgICJhbHRUZXh0IjogIkEgYnJpZ2h0bHkgbGl0LCBwcm9mZXNzaW9uYWwgaW1hZ2Ugb2YgYSBzaW5nbGUgcGVyc29uIHN0YW5kaW5nIGF0IGEgZm9yayBpbiBhIHJvYWQsIHN5bWJvbGl6aW5nIGEgZGlmZmljdWx0IGRlY2lzaW9uLCB3aXRoIGFic3RyYWN0IHRob3VnaHQgYnViYmxlcyBhYm92ZSB0aGVpciBoZWFkIHJlcHJlc2VudGluZyBldGhpY2FsIGNvbnNpZGVyYXRpb25zLiIsCiAgICAgICAgICAiYXNwZWN0UmF0aW8iOiAxLjc4LAogICAgICAgICAgImltYWdlSWQiOiAidXBsb2Fkcy9kMWNkNjc4MC1lODE3LTQ4YjUtOTNlYi0yNjY1YTI3MzFkOTMvZ2VuZXJhdGVkLWltYWdlLmpwZyIsCiAgICAgICAgICAic2VhcmNoVGVybSI6ICJBIGJyaWdodGx5IGxpdCwgcHJvZmVzc2lvbmFsIGltYWdlIG9mIGEgc2luZ2xlIHBlcnNvbiBzdGFuZGluZyBhdCBhIGZvcmsgaW4gYSByb2FkLCBzeW1ib2xpemluZyBhIGRpZmZpY3VsdCBkZWNpc2lvbiwgd2l0aCBhYnN0cmFjdCB0aG91Z2h0IGJ1YmJsZXMgYWJvdmUgdGhlaXIgaGVhZCByZXByZXNlbnRpbmcgZXRoaWNhbCBjb25zaWRlcmF0aW9ucy4iLAogICAgICAgICAgInNvdXJjZVR5cGUiOiAiR2VuZXJhdGVkIiwKICAgICAgICAgICJyaWdodHNUeXBlIjogIlVua25vd24iLAogICAgICAgICAgImxheW91dCI6ICJsZWZ0IiwKICAgICAgICAgICJzb3VyY2UiOiAiLi9hc3NldHMvaW1hZ2VzL2ltYWdlLWVlYzhmYzg5LTA1ZjgtNDI1NS05YzEzLWY3OWQ1MTY1MWM3MC5wbmciLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbWluZHNtaXRoL3VwbG9hZHMlMkZkMWNkNjc4MC1lODE3LTQ4YjUtOTNlYi0yNjY1YTI3MzFkOTMlMkZnZW5lcmF0ZWQtaW1hZ2UuanBnIgogICAgICAgIH0sCiAgICAgICAgIm9iamVjdEZpdCI6ICJjb3ZlciIsCiAgICAgICAgInN0YXR1cyI6ICJBdmFpbGFibGUiCiAgICAgIH0KICAgIH0sCiAgICAibzkyZCI6IHsKICAgICAgInR5cGUiOiAidGV4dFRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiT3B0aW9uYWwgQ2hhbGxlbmdlOiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDMKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJNQlNyIjogewogICAgICAidHlwZSI6ICJ0ZXh0VGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJDb3Jwb3JhdGUgUmVhZGluZXNzOiBQcm9mZXNzaW9uYWxpc20gYW5kIEFkYXB0YWJpbGl0eSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAgICJsZXZlbCI6IDEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJqdXN0aWZ5IjogImxlZnQiLAogICAgICAgICJhbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICJjYXBXaWR0aCI6IG51bGwsCiAgICAgICAgInRleHRBZG9ybm1lbnQiOiAibm9uZSIKICAgICAgfQogICAgfSwKICAgICJld2E1IjogewogICAgICAidHlwZSI6ICJkaWFsb2d1ZU5vZGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAic2NlbmUiOiB7CiAgICAgICAgICAiaWQiOiAiaUpaZyIKICAgICAgICB9LAogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIk5vdywgbGV0J3MgY29uc2lkZXIgdGhlICIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICJHb2xkZW4gUnVsZSBUZXN0IiwKICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvbGQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiLiBJZiB5b3Ugd2VyZSB0aGUgY2xpZW50LCByZWNlaXZpbmcgYSBwcm9kdWN0IHRoYXQgeW91IGtuZXcgaGFkIHNraXBwZWQgY3J1Y2lhbCBxdWFsaXR5IGNoZWNrcywgaG93IHdvdWxkIHlvdSBmZWVsPyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJjaGFyYWN0ZXJQb3NlIjogewogICAgICAgICAgInR5cGUiOiAidXBsb2FkZWQiLAogICAgICAgICAgImltYWdlIjogewogICAgICAgICAgICAic291cmNlIjogImFzc2V0cy9pbWFnZXMvc29waGlhLWFza2luZy5wbmciLAogICAgICAgICAgICAiYWx0VGV4dCI6ICJzb3BoaWEgYXNraW5nIiwKICAgICAgICAgICAgInJpZ2h0c1R5cGUiOiAiVW5rbm93biIsCiAgICAgICAgICAgICJzb3VyY2VUeXBlIjogIlVua25vd24iLAogICAgICAgICAgICAiYXNwZWN0UmF0aW8iOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgImxheW91dCI6ICJkZWZhdWx0IgogICAgICAgIH0sCiAgICAgICAgIm9wdGlvbnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJuZXh0IjogewogICAgICAgICAgICAgICJ0eXBlIjogIm5vZGUiLAogICAgICAgICAgICAgICJpZCI6ICJSVDVNIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRoZXkgbWlnaHQgbm90IGV2ZW4gbm90aWNlLCBhbmQgaWYgdGhleSBkaWQsIHdlIGNvdWxkIGFsd2F5cyBvZmZlciBhIGRpc2NvdW50IGxhdGVyLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmZWVkYmFjayI6ICJSZWx5aW5nIG9uIGEgY2xpZW50J3MgaWdub3JhbmNlIG9yIG9mZmVyaW5nIGEgcmVhY3RpdmUgc29sdXRpb24gaXNuJ3QgZXRoaWNhbC4gVGhlIEdvbGRlbiBSdWxlIGVtcGhhc2l6ZXMgcHJvYWN0aXZlIGZhaXJuZXNzIGFuZCByZXNwZWN0LiIsCiAgICAgICAgICAgICJpZCI6ICJZaG03IiwKICAgICAgICAgICAgImNoYXJhY3RlclJlYWN0aW9uIjogewogICAgICAgICAgICAgICJjaGFyYWN0ZXJJZCI6ICJlcmljIiwKICAgICAgICAgICAgICAiZW1vdGlvbiI6ICJzdHJlc3NlZCIsCiAgICAgICAgICAgICAgInR5cGUiOiAicHJlc2V0IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmV4dCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJub2RlIiwKICAgICAgICAgICAgICAiaWQiOiAiZktTQSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJBcyBhIGNsaWVudCwgSSdkIGZlZWwgYmV0cmF5ZWQgYW5kIGxvc2UgdHJ1c3QgaW4gdGhlIGNvbXBhbnksIGVzcGVjaWFsbHkgaWYgaXNzdWVzIGFyb3NlIGxhdGVyIHRoYXQgY291bGQgaGF2ZSBiZWVuIHByZXZlbnRlZC4iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZmVlZGJhY2siOiAiVGhhdCdzIHRoZSBjb3JlIG9mIHRoZSBHb2xkZW4gUnVsZS4gSXQgZm9yY2VzIHVzIHRvIGNvbnNpZGVyIHRoZSBpbXBhY3Qgb24gb3RoZXJzIGZyb20gdGhlaXIgcGVyc3BlY3RpdmUgWzEuMl0oY2l0ZSBcIjFcIikuIiwKICAgICAgICAgICAgImlkIjogIjItYWMiLAogICAgICAgICAgICAiY2hhcmFjdGVyUmVhY3Rpb24iOiB7CiAgICAgICAgICAgICAgImNoYXJhY3RlcklkIjogImVyaWMiLAogICAgICAgICAgICAgICJlbW90aW9uIjogIm5ldXRyYWwiLAogICAgICAgICAgICAgICJ0eXBlIjogInByZXNldCIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJhbmRvbWl6ZU9wdGlvbnMiOiB0cnVlLAogICAgICAgICJzaG93TWVzc2FnZUhpc3RvcnkiOiB0cnVlCiAgICAgIH0sCiAgICAgICJwb3NpdGlvbiI6IHsKICAgICAgICAieCI6IDUwMDAsCiAgICAgICAgInkiOiAwCiAgICAgIH0sCiAgICAgICJwYXJlbnRJZCI6ICJQdVNmIgogICAgfSwKICAgICJZUUM3IjogewogICAgICAidHlwZSI6ICJpbWFnZVRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAiaW1hZ2UiOiB7CiAgICAgICAgICAiYWx0VGV4dCI6ICJBIGJyaWdodGx5IGxpdCwgY2xlYW4gaW1hZ2Ugb2YgYSBzaW5nbGUsIGNvbmZpZGVudCBwcm9mZXNzaW9uYWwgcG9pbnRpbmcgdG93YXJkcyBhIGNsZWFyLCBzdHJ1Y3R1cmVkIHBhdGggb24gYSB3aGl0ZWJvYXJkLCBzeW1ib2xpemluZyBndWlkYW5jZSBhbmQgYSBjbGVhciBsZWFybmluZyBqb3VybmV5LiBObyB0ZXh0IG9uIHRoZSB3aGl0ZWJvYXJkLiIsCiAgICAgICAgICAiYXNwZWN0UmF0aW8iOiAxLAogICAgICAgICAgImltYWdlSWQiOiAidXBsb2Fkcy9kYWJlN2Y0NC05YmJhLTRmMzktODdhNi04ODJjMmE1MGQ4ZmIvZ2VuZXJhdGVkLWltYWdlLmpwZyIsCiAgICAgICAgICAic2VhcmNoVGVybSI6ICJBIGJyaWdodGx5IGxpdCwgY2xlYW4gaW1hZ2Ugb2YgYSBzaW5nbGUsIGNvbmZpZGVudCBwcm9mZXNzaW9uYWwgcG9pbnRpbmcgdG93YXJkcyBhIGNsZWFyLCBzdHJ1Y3R1cmVkIHBhdGggb24gYSB3aGl0ZWJvYXJkLCBzeW1ib2xpemluZyBndWlkYW5jZSBhbmQgYSBjbGVhciBsZWFybmluZyBqb3VybmV5LiBObyB0ZXh0IG9uIHRoZSB3aGl0ZWJvYXJkLiIsCiAgICAgICAgICAic291cmNlVHlwZSI6ICJHZW5lcmF0ZWQiLAogICAgICAgICAgInJpZ2h0c1R5cGUiOiAiVW5rbm93biIsCiAgICAgICAgICAibGF5b3V0IjogInJpZ2h0LWZ1bGwiLAogICAgICAgICAgInNvdXJjZSI6ICIuL2Fzc2V0cy9pbWFnZXMvaW1hZ2UtZjZjMDg0ODEtYmQxNi00YTMyLTk5YTEtM2M4OGRjMWQ2Yjc5LnBuZyIsCiAgICAgICAgICAidGh1bWJuYWlsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRmRhYmU3ZjQ0LTliYmEtNGYzOS04N2E2LTg4MmMyYTUwZDhmYiUyRmdlbmVyYXRlZC1pbWFnZS5qcGciCiAgICAgICAgfSwKICAgICAgICAib2JqZWN0Rml0IjogImNvdmVyIiwKICAgICAgICAic3RhdHVzIjogIkF2YWlsYWJsZSIKICAgICAgfQogICAgfSwKICAgICJUX0cxIjogewogICAgICAidHlwZSI6ICJxdW90ZVRpbGUiLAogICAgICAiZGF0YSI6IHsKICAgICAgICAicXVvdGUiOiB7CiAgICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgInRleHQiOiAiT3VyIGJ1c2luZXNzIGlzIGFib3V0IG1vcmUgdGhhbiBqdXN0IHNlbGxpbmcgcHJvZHVjdHM7IGl0J3MgYWJvdXQgYWR2b2NhdGluZyBmb3IgZW52aXJvbm1lbnRhbCBhbmQgc29jaWFsIHJlc3BvbnNpYmlsaXR5LiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJhdHRyaWJ1dGlvbiI6IHsKICAgICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiLAogICAgICAgICAgICAgICAgICAidGV4dCI6ICLigJQgUGF0YWdvbmlhJ3MgUGhpbG9zb3BoeSAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiaW1hZ2UiOiBudWxsLAogICAgICAgICJiYWNrZ3JvdW5kSW1hZ2UiOiBudWxsCiAgICAgIH0sCiAgICAgICJlbGVtZW50Q29sb3IiOiB7CiAgICAgICAgImFsaWFzIjogImFjY2VudC0xIgogICAgICB9CiAgICB9LAogICAgIkVRZE4iOiB7CiAgICAgICJ0eXBlIjogImltYWdlVGlsZSIsCiAgICAgICJkYXRhIjogewogICAgICAgICJpbWFnZSI6IHsKICAgICAgICAgICJhbHRUZXh0IjogIkEgd2VsbC1saXQsIHJlYWxpc3RpYyBpbWFnZSBvZiBhIHNpbmdsZSBidXNpbmVzcyBwcm9mZXNzaW9uYWwgc2l0dGluZyBhdCBhIGRlc2ssIGxvb2tpbmcgdGhvdWdodGZ1bGx5IGF0IHR3byBkaXZlcmdpbmcgcGF0aHMgb24gYSBkb2N1bWVudCBvciBzY3JlZW4sIHN5bWJvbGl6aW5nIGEgZGlmZmljdWx0IGV0aGljYWwgY2hvaWNlLiBUaGUgcGVyc29uIGFwcGVhcnMgdG8gYmUgY29udGVtcGxhdGluZyBhIGRlY2lzaW9uLiIsCiAgICAgICAgICAiYXNwZWN0UmF0aW8iOiAxLjc4LAogICAgICAgICAgImltYWdlSWQiOiAidXBsb2Fkcy85MTEyYTgxZC03MDllLTRjNzMtODg0MC03Njc2MmQ3ZDU1ZDgvZ2VuZXJhdGVkLWltYWdlLmpwZyIsCiAgICAgICAgICAic2VhcmNoVGVybSI6ICJBIHdlbGwtbGl0LCByZWFsaXN0aWMgaW1hZ2Ugb2YgYSBzaW5nbGUgYnVzaW5lc3MgcHJvZmVzc2lvbmFsIHNpdHRpbmcgYXQgYSBkZXNrLCBsb29raW5nIHRob3VnaHRmdWxseSBhdCB0d28gZGl2ZXJnaW5nIHBhdGhzIG9uIGEgZG9jdW1lbnQgb3Igc2NyZWVuLCBzeW1ib2xpemluZyBhIGRpZmZpY3VsdCBldGhpY2FsIGNob2ljZS4gVGhlIHBlcnNvbiBhcHBlYXJzIHRvIGJlIGNvbnRlbXBsYXRpbmcgYSBkZWNpc2lvbi4iLAogICAgICAgICAgInNvdXJjZVR5cGUiOiAiR2VuZXJhdGVkIiwKICAgICAgICAgICJyaWdodHNUeXBlIjogIlVua25vd24iLAogICAgICAgICAgImxheW91dCI6ICJsZWZ0IiwKICAgICAgICAgICJzb3VyY2UiOiAiLi9hc3NldHMvaW1hZ2VzL2ltYWdlLWZkYjVkNmI1LTUyMTQtNDllOS04NWI3LWY1M2MwOTQyYTQ5MC5wbmciLAogICAgICAgICAgInRodW1ibmFpbCI6ICJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbWluZHNtaXRoL3VwbG9hZHMlMkY5MTEyYTgxZC03MDllLTRjNzMtODg0MC03Njc2MmQ3ZDU1ZDglMkZnZW5lcmF0ZWQtaW1hZ2UuanBnIgogICAgICAgIH0sCiAgICAgICAgIm9iamVjdEZpdCI6ICJjb3ZlciIsCiAgICAgICAgInN0YXR1cyI6ICJBdmFpbGFibGUiCiAgICAgIH0KICAgIH0KICB9LAogICJibG9ja09yZGVyIjogWwogICAgIjF2aU0iLAogICAgInlZZDIiLAogICAgImxJekciLAogICAgIm9XN0YiLAogICAgIkI4RkYiLAogICAgIjVrWlIiLAogICAgIlVnSkEiLAogICAgIlZmZzMiLAogICAgIlBPdm4iLAogICAgIl8xb18iLAogICAgIklmQ1QiLAogICAgIl9md2giLAogICAgIkpnN1ciLAogICAgIlJGeDIiLAogICAgIlEzY0wiLAogICAgImp2NzQiLAogICAgIlpzdE4iLAogICAgImhKSmciCiAgXSwKICAibmFycmF0aW9uTWFwIjogbnVsbCwKICAic2V0dGluZ3MiOiB7CiAgICAibG9nbyI6IG51bGwsCiAgICAibG9nb1N0eWxlIjogIndoaXRlLWJhY2tncm91bmQiLAogICAgImV4aXRCdXR0b24iOiBmYWxzZSwKICAgICJ2aWV3aW5nTW9kZSI6ICJob3Jpem9udGFsIiwKICAgICJoaWRlVGl0bGVQYWdlIjogdHJ1ZSwKICAgICJyZXBvcnRpbmdNb2RlIjogInBhc3MvaW5jb21wbGV0ZSIsCiAgICAic2NvcmVkQ29udGVudCI6ICJhbGwiLAogICAgImRpc3BsYXlSZXN0YXJ0IjogdHJ1ZSwKICAgICJsb2dvQXNwZWN0UmF0aW8iOiBudWxsLAogICAgInNjb3JlZFNlY3Rpb25JZCI6IG51bGwsCiAgICAiYXNzZXNzbWVudFJldHJpZXMiOiAwLAogICAgImNvdXJzZURpc3BsYXlNb2RlIjogImxpc3QiLAogICAgIm5hcnJhdGlvbkF1dG9wbGF5IjogZmFsc2UsCiAgICAibmF2aWdhdGlvbkZyZWVkb20iOiAicmVzdHJpY3RlZCIsCiAgICAicGFzc2luZ1BlcmNlbnRhZ2UiOiAwLAogICAgImNvbXBsZXRpb25Dcml0ZXJpYSI6ICJhc3Nlc3NtZW50QW5kVmlldyIsCiAgICAiZW50cmFuY2VBbmltYXRpb25zIjogdHJ1ZSwKICAgICJpbmNsdWRlQ2VydGlmaWNhdGUiOiBmYWxzZSwKICAgICJwcmV2aWV3RGVzY3JpcHRpb24iOiBudWxsLAogICAgInJlcXVpcmVJbnRlcmFjdGl2ZXMiOiBmYWxzZSwKICAgICJsZWFybmVyRW50cmFuY2VTdXJ2ZXkiOiBmYWxzZSwKICAgICJjb21wbGV0aW9uUHJlc2VudGF0aW9uIjogImRpYWxvZyIsCiAgICAic2hvd1Bvd2VyZWRCeU1pbmRzbWl0aCI6IGZhbHNlLAogICAgImVuaGFuY2VkU2Nvcm1JbnRlZ3JhdGlvbiI6IGZhbHNlLAogICAgImxlYXJuZXJFbnRyYW5jZVN1cnZleUVtYWlsIjogZmFsc2UKICB9LAogICJiYWNrZ3JvdW5kSW5mbyI6ICIiLAogICJsYW5ndWFnZSI6ICJFTiIsCiAgInByb2plY3RJZCI6IG51bGwsCiAgInRoZW1lIjogewogICAgImlkIjogImNtOWV1eGtqMzAwMDAwOGxiOGpucGNrZG4iLAogICAgIm5hbWUiOiAiQ2xlYW4gQmx1ZSIsCiAgICAicHVibGljIjogdHJ1ZSwKICAgICJkcmFmdCI6IGZhbHNlLAogICAgImRyYWZ0RnJvbVRoZW1lSWQiOiBudWxsLAogICAgIm9yZ2FuaXphdGlvbklkIjogbnVsbCwKICAgICJ1c2VySWQiOiBudWxsLAogICAgInBhZ2VDb2xvciI6ICIjZjZmNGVkIiwKICAgICJoZWFkZXJGb250IjogewogICAgICAidXJsIjogImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9TG9yYTppdGFsLHdnaHRAMCwxMDA7MCwyMDA7MCwzMDA7MCw0MDA7MCw1MDA7MCw2MDA7MCw3MDA7MCw4MDA7MCw5MDA7MSwxMDA7MSwyMDA7MSwzMDA7MSw0MDA7MSw1MDA7MSw2MDA7MSw3MDA7MSw4MDA7MSw5MDAmZGlzcGxheT1ibG9jayIsCiAgICAgICJuYW1lIjogIkxvcmEiLAogICAgICAidHlwZSI6ICJnb29nbGUiCiAgICB9LAogICAgImJvZHlGb250IjogewogICAgICAidXJsIjogImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Tm90byUyMFNhbnM6aXRhbCx3Z2h0QDAsMTAwOzAsMjAwOzAsMzAwOzAsNDAwOzAsNTAwOzAsNjAwOzAsNzAwOzAsODAwOzAsOTAwOzEsMTAwOzEsMjAwOzEsMzAwOzEsNDAwOzEsNTAwOzEsNjAwOzEsNzAwOzEsODAwOzEsOTAwJmRpc3BsYXk9YmxvY2siLAogICAgICAibmFtZSI6ICJOb3RvIFNhbnMiLAogICAgICAidHlwZSI6ICJnb29nbGUiCiAgICB9LAogICAgImltYWdlVXJsIjogbnVsbCwKICAgICJwdWJsaWNPcmRlciI6IDAsCiAgICAiY29udGVudE92ZXJsYXkiOiBudWxsLAogICAgInRpdGxlT3ZlcmxheSI6IG51bGwsCiAgICAiaGVhZGVyV2VpZ2h0IjogNTAwLAogICAgImhlYWRlckNvbG9yIjogIiMwYTBhM2YiLAogICAgImJvZHlXZWlnaHQiOiA0MDAsCiAgICAiYm9keUNvbG9yIjogIiMyNzI3MjciLAogICAgImF1dG9Db2xvciI6IGZhbHNlLAogICAgImFjY2VudENvbG9yIjogIiM0NDQ0NDQiLAogICAgInNlY29uZGFyeUFjY2VudENvbG9yIjogIiMwMDU5OGEiCiAgfSwKICAiaWQiOiAiY21jb2ZpMTlzMDBoY2p1MDdqcHRqc244MyIsCiAgInRoZW1lSWQiOiAiY205ZXV4a2ozMDAwMDA4bGI4am5wY2tkbiIsCiAgInZlcnNpb24iOiAiMi4wLjAtZ2VuZXJhdGVkIiwKICAib3JnYW5pemF0aW9uSWQiOiAiY21jbXk2a2xrMDB4YWpsMDd3bnRpYjY1dSIsCiAgInRodW1ibmFpbFVybCI6ICJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbWluZHNtaXRoL3RodW1ibmFpbHMvNWQxMDU5YmQtZTgwMC00Zjg3LTliZjItODAwNTdlNGIwZGI2LnBuZyIsCiAgInRodW1ibmFpbExhc3RVcGRhdGVkIjoge30sCiAgInRodW1ibmFpbENvbnRlbnRIYXNoIjogIjBkZTYyZGZkNDE2YzkxZjAyZGM5MWZlYTJlYjUxOGM1MTdhNmE0NjI4NDhhZjQ2MGZkNTIzMjdjMGJhYWY1YzgiLAogICJ1c2VyVXBsb2FkZWRUaHVtYm5haWxVcmwiOiBudWxsLAogICJjb3Vyc2VJZCI6IG51bGwsCiAgImNvdXJzZVRpdGxlIjogbnVsbCwKICAic3Rvcnlib2FyZEl0ZW1zIjogewogICAgIkI4RkYiOiB7CiAgICAgICJ0eXBlIjogbnVsbCwKICAgICAgImNvbnRleHQiOiAiIiwKICAgICAgImFkZGl0aW9ucyI6IFtdLAogICAgICAicGFnZUxlbmd0aCI6ICJtZCIsCiAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgImluc3RydWN0aW9ucyI6IHsKICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRleHQiOiAiV2h5IEJvdGhlciB3aXRoIEV0aGljcz8iLAogICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlNpbXBsaWZpZWQgRXhwbGFuYXRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkdvb2QgZXRoaWNzIGlzIGdvb2QgYnVzaW5lc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiQnVpbGRzIHRydXN0IHdpdGggY3VzdG9tZXJzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkF0dHJhY3RzIGFuZCByZXRhaW5zIHRhbGVudCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJBdm9pZHMgbGVnYWwgdHJvdWJsZXMgYW5kIFBSIGRpc2FzdGVycyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJCZWRyb2NrIG9mIGEgc3VzdGFpbmFibGUgY29tcGFueSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJSZWFsLVdvcmxkIEV4YW1wbGU6IFBhdGFnb25pYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYnVsbGV0TGlzdCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiXCJEb24ndCBCdXkgVGhpcyBKYWNrZXRcIiBjYW1wYWlnbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIxJSBvZiBzYWxlcyB0byBlbnZpcm9ubWVudGFsIGNhdXNlcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJMb3lhbCBjdXN0b21lciBjb21tdW5pdHkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjdmNDIyZjEyLWY0NzYtNGE2Mi05ZmU5LTFlMDU1ZWI2ZDE5OSUyRmJ1c2luZXNzLWV0aGljcy0tY29ycG9yYXRlLXJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwsCiAgICAgICAgICAiZmlsZVR5cGUiOiAicGRmIiwKICAgICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICAgInBhZ2VSYW5nZSI6IFsKICAgICAgICAgICAgMgogICAgICAgICAgXSwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJmV2E5IiwKICAgICAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDE1LAogICAgICAgICAgICAgIDE3CiAgICAgICAgICAgIF0KICAgICAgICAgIF0sCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiAxNDEsCiAgICAgICAgICAidGltZXN0YW1wUmFuZ2UiOiBudWxsLAogICAgICAgICAgIm51bWJlck9mQXNzb2NpYXRlZExlc3NvbnMiOiAwCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgIlpzdE4iOiB7CiAgICAgICJ0eXBlIjogbnVsbCwKICAgICAgImNvbnRleHQiOiAiIiwKICAgICAgImFkZGl0aW9ucyI6IFtdLAogICAgICAicGFnZUxlbmd0aCI6ICJtZCIsCiAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgImluc3RydWN0aW9ucyI6IHsKICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRleHQiOiAiUmVzb3VyY2VzIGZvciBEZWVwZXIgTGVhcm5pbmciLAogICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlJlYWRpbmcgTGlzdDoiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlwiVGhlIFNwZWVkIG9mIFRydXN0XCIgYnkgU3RlcGhlbiBNLlIuIENvdmV5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkhhcnZhcmQgQnVzaW5lc3MgUmV2aWV3J3MgXCJFdGhpY3NcIiBzZWN0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRvb2xzL1Jlc291cmNlczoiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRoZSBNYXJra3VsYSBDZW50ZXIgZm9yIEFwcGxpZWQgRXRoaWNzIGF0IFNhbnRhIENsYXJhIFVuaXZlcnNpdHkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiR2xhc3Nkb29yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIk9wdGlvbmFsIENoYWxsZW5nZTogRmluZCBhIHJlY2VudCBidXNpbmVzcyBuZXdzIHN0b3J5IGludm9sdmluZyBhbiBldGhpY2FsIGlzc3VlIGFuZCBhbmFseXplIGl0IHVzaW5nIHRoZSB0aHJlZS1zdGVwIGZyYW1ld29yay4iLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgImRvY3VtZW50SW5zdGFuY2VzIjogWwogICAgICAgIHsKICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL21pbmRzbWl0aC91cGxvYWRzJTJGN2Y0MjJmMTItZjQ3Ni00YTYyLTlmZTktMWUwNTVlYjZkMTk5JTJGYnVzaW5lc3MtZXRoaWNzLS1jb3Jwb3JhdGUtcmVhZGluZXNzLnBkZiIsCiAgICAgICAgICAidGl0bGUiOiAiQnVzaW5lc3MgRXRoaWNzICYgQ29ycG9yYXRlIFJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgImR1cmF0aW9uIjogbnVsbCwKICAgICAgICAgICJmaWxlVHlwZSI6ICJwZGYiLAogICAgICAgICAgInBhZ2VDb3VudCI6IDYsCiAgICAgICAgICAicGFnZVJhbmdlIjogWwogICAgICAgICAgICA2CiAgICAgICAgICBdLAogICAgICAgICAgIndvcmRDb3VudCI6IDE3MTcsCiAgICAgICAgICAiZG9jdW1lbnRJZCI6ICJzZzd4IiwKICAgICAgICAgICJpbnN0YW5jZUlkIjogIm13ZjkiLAogICAgICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAgICAgImNvbXByZXNzZWRVcmwiOiBudWxsLAogICAgICAgICAgInBhcnRpdGlvblJhbmdlIjogWwogICAgICAgICAgICBbCiAgICAgICAgICAgICAgNTksCiAgICAgICAgICAgICAgNjcKICAgICAgICAgICAgXQogICAgICAgICAgXSwKICAgICAgICAgICJyYW5nZVdvcmRDb3VudCI6IDEyMywKICAgICAgICAgICJ0aW1lc3RhbXBSYW5nZSI6IG51bGwsCiAgICAgICAgICAibnVtYmVyT2ZBc3NvY2lhdGVkTGVzc29ucyI6IDAKICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICAiVWdKQSI6IHsKICAgICAgInR5cGUiOiAiZGl2aWRlciIsCiAgICAgICJjb250ZXh0IjogIiIsCiAgICAgICJhZGRpdGlvbnMiOiBbXSwKICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAiaW5zdHJ1Y3Rpb25zIjogIk5hdmlnYXRpbmcgRXRoaWNhbCBEaWxlbW1hcyIsCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFtdCiAgICB9LAogICAgIklmQ1QiOiB7CiAgICAgICJ0eXBlIjogInNjZW5hcmlvIiwKICAgICAgImNvbnRleHQiOiAiIiwKICAgICAgImFkZGl0aW9ucyI6IFtdLAogICAgICAicGFnZUxlbmd0aCI6ICJtZCIsCiAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgImluc3RydWN0aW9ucyI6IHsKICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRleHQiOiAiQ2hlY2twb2ludCAyOiBTaG9ydCBFeGVyY2lzZSIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiYnVsbGV0TGlzdCIsCiAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiU2NlbmFyaW86IFRlYW0gaXMgYmVoaW5kIG9uIGEgbWFqb3IgcHJvamVjdCwgdGVhbSBtZW1iZXIgc3VnZ2VzdHMgY3V0dGluZyBjb3JuZXJzIG9uIHF1YWxpdHkgdGVzdGluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIllvdXIgVGFzazogQXBwbHkgdGhlIHRocmVlLXN0ZXAgZnJhbWV3b3JrIChUcmFuc3BhcmVuY3ksIEdvbGRlbiBSdWxlLCBDb25zZXF1ZW5jZXMpIHRvIHRoaXMgc2l0dWF0aW9uLiBXaGF0IHdvdWxkIHlvdSBkbyBhcyB0aGUgbWFuYWdlcj8iLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgImRvY3VtZW50SW5zdGFuY2VzIjogWwogICAgICAgIHsKICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL21pbmRzbWl0aC91cGxvYWRzJTJGN2Y0MjJmMTItZjQ3Ni00YTYyLTlmZTktMWUwNTVlYjZkMTk5JTJGYnVzaW5lc3MtZXRoaWNzLS1jb3Jwb3JhdGUtcmVhZGluZXNzLnBkZiIsCiAgICAgICAgICAidGl0bGUiOiAiQnVzaW5lc3MgRXRoaWNzICYgQ29ycG9yYXRlIFJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgImR1cmF0aW9uIjogbnVsbCwKICAgICAgICAgICJmaWxlVHlwZSI6ICJwZGYiLAogICAgICAgICAgInBhZ2VDb3VudCI6IDYsCiAgICAgICAgICAicGFnZVJhbmdlIjogWwogICAgICAgICAgICA0CiAgICAgICAgICBdLAogICAgICAgICAgIndvcmRDb3VudCI6IDE3MTcsCiAgICAgICAgICAiZG9jdW1lbnRJZCI6ICJzZzd4IiwKICAgICAgICAgICJpbnN0YW5jZUlkIjogIlRNc24iLAogICAgICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAgICAgImNvbXByZXNzZWRVcmwiOiBudWxsLAogICAgICAgICAgInBhcnRpdGlvblJhbmdlIjogWwogICAgICAgICAgICBbCiAgICAgICAgICAgICAgNDIsCiAgICAgICAgICAgICAgNDQKICAgICAgICAgICAgXQogICAgICAgICAgXSwKICAgICAgICAgICJyYW5nZVdvcmRDb3VudCI6IDY0LAogICAgICAgICAgInRpbWVzdGFtcFJhbmdlIjogbnVsbCwKICAgICAgICAgICJudW1iZXJPZkFzc29jaWF0ZWRMZXNzb25zIjogMAogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgICJQT3ZuIjogewogICAgICAidHlwZSI6IG51bGwsCiAgICAgICJjb250ZXh0IjogIiIsCiAgICAgICJhZGRpdGlvbnMiOiBbXSwKICAgICAgInBhZ2VMZW5ndGgiOiAibWQiLAogICAgICAiZG9jdW1lbnRUZXh0IjogIiIsCiAgICAgICJpbnN0cnVjdGlvbnMiOiB7CiAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIkEgU2ltcGxlIEZyYW1ld29yayBmb3IgRXRoaWNhbCBEZWNpc2lvbnMiLAogICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlNpbXBsaWZpZWQgRXhwbGFuYXRpb246IE1lbnRhbCBjaGVja2xpc3QiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJUaGUgVHJhbnNwYXJlbmN5IFRlc3QiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNvbWZvcnRhYmxlIHdpdGggZGVjaXNpb24gYmVpbmcgcHVibGljPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJSZWQgZmxhZyBpZiB5b3UgbmVlZCB0byBoaWRlIGl0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRoZSBHb2xkZW4gUnVsZSBUZXN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJUcmVhdCBvdGhlcnMgYXMgeW91IHdvdWxkIHdhbnQgdG8gYmUgdHJlYXRlZD8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiQ29uc2lkZXIgdGhlIGltcGFjdCBvbiBvdGhlcnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiVGhlIENvbnNlcXVlbmNlcyBUZXN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJTaG9ydC10ZXJtIGFuZCBsb25nLXRlcm0gY29uc2VxdWVuY2VzIGZvciBzdGFrZWhvbGRlcnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjdmNDIyZjEyLWY0NzYtNGE2Mi05ZmU5LTFlMDU1ZWI2ZDE5OSUyRmJ1c2luZXNzLWV0aGljcy0tY29ycG9yYXRlLXJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwsCiAgICAgICAgICAiZmlsZVR5cGUiOiAicGRmIiwKICAgICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICAgInBhZ2VSYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDMsCiAgICAgICAgICAgICAgNAogICAgICAgICAgICBdCiAgICAgICAgICBdLAogICAgICAgICAgIndvcmRDb3VudCI6IDE3MTcsCiAgICAgICAgICAiZG9jdW1lbnRJZCI6ICJzZzd4IiwKICAgICAgICAgICJpbnN0YW5jZUlkIjogInZuX00iLAogICAgICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAgICAgImNvbXByZXNzZWRVcmwiOiBudWxsLAogICAgICAgICAgInBhcnRpdGlvblJhbmdlIjogWwogICAgICAgICAgICBbCiAgICAgICAgICAgICAgMzIsCiAgICAgICAgICAgICAgMzYKICAgICAgICAgICAgXQogICAgICAgICAgXSwKICAgICAgICAgICJyYW5nZVdvcmRDb3VudCI6IDEzMSwKICAgICAgICAgICJ0aW1lc3RhbXBSYW5nZSI6IG51bGwsCiAgICAgICAgICAibnVtYmVyT2ZBc3NvY2lhdGVkTGVzc29ucyI6IDAKICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICAianY3NCI6IHsKICAgICAgInR5cGUiOiBudWxsLAogICAgICAiY29udGV4dCI6ICIiLAogICAgICAiYWRkaXRpb25zIjogW10sCiAgICAgICJwYWdlTGVuZ3RoIjogIm1kIiwKICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAiaW5zdHJ1Y3Rpb25zIjogewogICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJDaGVja3BvaW50IDM6IFJlZmxlY3Rpb24gUHJvbXB0IiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJSZWZsZWN0aW9uOiBXaGF0IGlzIG9uZSBwcmFjdGljYWwgc3RlcCB5b3UgY2FuIHRha2UgaW4gdGhlIG5leHQgd2VlayB0byBpbXByb3ZlIHlvdXIgXCJjb3Jwb3JhdGUgcmVhZGluZXNzXCI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjdmNDIyZjEyLWY0NzYtNGE2Mi05ZmU5LTFlMDU1ZWI2ZDE5OSUyRmJ1c2luZXNzLWV0aGljcy0tY29ycG9yYXRlLXJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwsCiAgICAgICAgICAiZmlsZVR5cGUiOiAicGRmIiwKICAgICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICAgInBhZ2VSYW5nZSI6IFsKICAgICAgICAgICAgNQogICAgICAgICAgXSwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJuTTNlIiwKICAgICAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDU3LAogICAgICAgICAgICAgIDU4CiAgICAgICAgICAgIF0KICAgICAgICAgIF0sCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiA1MSwKICAgICAgICAgICJ0aW1lc3RhbXBSYW5nZSI6IG51bGwsCiAgICAgICAgICAibnVtYmVyT2ZBc3NvY2lhdGVkTGVzc29ucyI6IDAKICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICAiUkZ4MiI6IHsKICAgICAgInR5cGUiOiBudWxsLAogICAgICAiY29udGV4dCI6ICIiLAogICAgICAiYWRkaXRpb25zIjogW10sCiAgICAgICJwYWdlTGVuZ3RoIjogIm1kIiwKICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAiaW5zdHJ1Y3Rpb25zIjogewogICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJQcm9mZXNzaW9uYWxpc20gMTAxIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJTaW1wbGlmaWVkIEV4cGxhbmF0aW9uOiBDb3Jwb3JhdGUgcmVhZGluZXNzIGJleW9uZCB0ZWNobmljYWwgc2tpbGxzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJBY2NvdW50YWJpbGl0eTogT3duIG1pc3Rha2VzIGFuZCByZXNwb25zaWJpbGl0aWVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNvbW11bmljYXRpb246IENsZWFyLCBjb25jaXNlLCByZXNwZWN0ZnVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlRpbWUgTWFuYWdlbWVudDogUHVuY3R1YWwsIGRlbGl2ZXIgd29yayBvbiBzY2hlZHVsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJEaWdpdGFsIEV0aXF1ZXR0ZTogUHJvZmVzc2lvbmFsIG9ubGluZSBjb25kdWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlJlYWwtV29ybGQgRXhhbXBsZTogSW50ZXJuJ3MgYmVoYXZpb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgImRvY3VtZW50SW5zdGFuY2VzIjogWwogICAgICAgIHsKICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL21pbmRzbWl0aC91cGxvYWRzJTJGN2Y0MjJmMTItZjQ3Ni00YTYyLTlmZTktMWUwNTVlYjZkMTk5JTJGYnVzaW5lc3MtZXRoaWNzLS1jb3Jwb3JhdGUtcmVhZGluZXNzLnBkZiIsCiAgICAgICAgICAidGl0bGUiOiAiQnVzaW5lc3MgRXRoaWNzICYgQ29ycG9yYXRlIFJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgImR1cmF0aW9uIjogbnVsbCwKICAgICAgICAgICJmaWxlVHlwZSI6ICJwZGYiLAogICAgICAgICAgInBhZ2VDb3VudCI6IDYsCiAgICAgICAgICAicGFnZVJhbmdlIjogWwogICAgICAgICAgICA1CiAgICAgICAgICBdLAogICAgICAgICAgIndvcmRDb3VudCI6IDE3MTcsCiAgICAgICAgICAiZG9jdW1lbnRJZCI6ICJzZzd4IiwKICAgICAgICAgICJpbnN0YW5jZUlkIjogIkprbUwiLAogICAgICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAgICAgImNvbXByZXNzZWRVcmwiOiBudWxsLAogICAgICAgICAgInBhcnRpdGlvblJhbmdlIjogWwogICAgICAgICAgICBbCiAgICAgICAgICAgICAgNDgsCiAgICAgICAgICAgICAgNTMKICAgICAgICAgICAgXQogICAgICAgICAgXSwKICAgICAgICAgICJyYW5nZVdvcmRDb3VudCI6IDE4MCwKICAgICAgICAgICJ0aW1lc3RhbXBSYW5nZSI6IG51bGwsCiAgICAgICAgICAibnVtYmVyT2ZBc3NvY2lhdGVkTGVzc29ucyI6IDAKICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICAiSmc3VyI6IHsKICAgICAgInR5cGUiOiBudWxsLAogICAgICAiY29udGV4dCI6ICIiLAogICAgICAiYWRkaXRpb25zIjogW10sCiAgICAgICJwYWdlTGVuZ3RoIjogIm1kIiwKICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAiaW5zdHJ1Y3Rpb25zIjogewogICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJNb2R1bGUgMzogQ29ycG9yYXRlIFJlYWRpbmVzcyBpbiBBY3Rpb24iLAogICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIk9iamVjdGl2ZTogVG8gdW5kZXJzdGFuZCB0aGUgcHJhY3RpY2FsIGVsZW1lbnRzIG9mIHByb2Zlc3Npb25hbGlzbSBhbmQgZXRoaWNhbCBjb25kdWN0IGV4cGVjdGVkIGluIGEgY29ycG9yYXRlIGVudmlyb25tZW50LiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkxlc3NvbiAxOiBQcm9mZXNzaW9uYWxpc20gMTAxIiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjdmNDIyZjEyLWY0NzYtNGE2Mi05ZmU5LTFlMDU1ZWI2ZDE5OSUyRmJ1c2luZXNzLWV0aGljcy0tY29ycG9yYXRlLXJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwsCiAgICAgICAgICAiZmlsZVR5cGUiOiAicGRmIiwKICAgICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICAgInBhZ2VSYW5nZSI6IFsKICAgICAgICAgICAgNAogICAgICAgICAgXSwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJFRlNXIiwKICAgICAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDQ1LAogICAgICAgICAgICAgIDQ3CiAgICAgICAgICAgIF0KICAgICAgICAgIF0sCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiAzMiwKICAgICAgICAgICJ0aW1lc3RhbXBSYW5nZSI6IG51bGwsCiAgICAgICAgICAibnVtYmVyT2ZBc3NvY2lhdGVkTGVzc29ucyI6IDAKICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICAiX2Z3aCI6IHsKICAgICAgInR5cGUiOiAiZGl2aWRlciIsCiAgICAgICJjb250ZXh0IjogIiIsCiAgICAgICJhZGRpdGlvbnMiOiBbXSwKICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAiaW5zdHJ1Y3Rpb25zIjogIkNvcnBvcmF0ZSBSZWFkaW5lc3MgaW4gQWN0aW9uIiwKICAgICAgImRvY3VtZW50SW5zdGFuY2VzIjogW10KICAgIH0sCiAgICAieVlkMiI6IHsKICAgICAgInR5cGUiOiAiZGl2aWRlciIsCiAgICAgICJjb250ZXh0IjogIiIsCiAgICAgICJhZGRpdGlvbnMiOiBbXSwKICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAiaW5zdHJ1Y3Rpb25zIjogIkludHJvZHVjdGlvbiB0byBCdXNpbmVzcyBFdGhpY3MiLAogICAgICAiZG9jdW1lbnRJbnN0YW5jZXMiOiBbXQogICAgfSwKICAgICJsSXpHIjogewogICAgICAidHlwZSI6IG51bGwsCiAgICAgICJjb250ZXh0IjogIiIsCiAgICAgICJhZGRpdGlvbnMiOiBbXSwKICAgICAgInBhZ2VMZW5ndGgiOiAibWQiLAogICAgICAiZG9jdW1lbnRUZXh0IjogIiIsCiAgICAgICJpbnN0cnVjdGlvbnMiOiB7CiAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNvdXJzZSBPdmVydmlldyIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiYnVsbGV0TGlzdCIsCiAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiSW50cm9kdWN0aW9uIHRvIHRoZSBjb3Vyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJDb3Vyc2UgZ29hbHMgYW5kIHN0cnVjdHVyZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIk92ZXJ2aWV3IG9mIHRoZSB0aHJlZSBtb2R1bGVzOiBCdXNpbmVzcyBFdGhpY3MsIEV0aGljYWwgRGlsZW1tYXMsIGFuZCBDb3Jwb3JhdGUgUmVhZGluZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjdmNDIyZjEyLWY0NzYtNGE2Mi05ZmU5LTFlMDU1ZWI2ZDE5OSUyRmJ1c2luZXNzLWV0aGljcy0tY29ycG9yYXRlLXJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwsCiAgICAgICAgICAiZmlsZVR5cGUiOiAicGRmIiwKICAgICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICAgInBhZ2VSYW5nZSI6IFsKICAgICAgICAgICAgMQogICAgICAgICAgXSwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJBUTdtIiwKICAgICAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDEsCiAgICAgICAgICAgICAgOQogICAgICAgICAgICBdCiAgICAgICAgICBdLAogICAgICAgICAgInJhbmdlV29yZENvdW50IjogMTQ3LAogICAgICAgICAgInRpbWVzdGFtcFJhbmdlIjogbnVsbCwKICAgICAgICAgICJudW1iZXJPZkFzc29jaWF0ZWRMZXNzb25zIjogMAogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgICJvVzdGIjogewogICAgICAidHlwZSI6IG51bGwsCiAgICAgICJjb250ZXh0IjogIiIsCiAgICAgICJhZGRpdGlvbnMiOiBbXSwKICAgICAgInBhZ2VMZW5ndGgiOiAibWQiLAogICAgICAiZG9jdW1lbnRUZXh0IjogIiIsCiAgICAgICJpbnN0cnVjdGlvbnMiOiB7CiAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIldoYXQgYXJlIEJ1c2luZXNzIEV0aGljcz8iLAogICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlNpbXBsaWZpZWQgRXhwbGFuYXRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlJ1bGVzIG9mIHRoZSBnYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIk1vcmUgdGhhbiBqdXN0IGxlZ2FsLCBpdCdzIGFib3V0IHdoYXQncyByaWdodCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJIb25lc3R5LCByZXNwZWN0LCB0cmFuc3BhcmVuY3kiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiVmFsdWVzIHlvdSBhbmQgeW91ciBjb21wYW55IHN0YW5kIGZvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJSZWFsLVdvcmxkIEV4YW1wbGU6IFZvbGtzd2FnZW4gRGllc2VsZ2F0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYnVsbGV0TGlzdCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiQ2hlYXRpbmcgb24gZW1pc3Npb25zIHRlc3RzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIklsbGVnYWwgYW5kIGV0aGljYWwgYnJlYWNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNvbnNlcXVlbmNlczogZmluZXMsIHN0b2NrIGRyb3AsIGxvc3Mgb2YgdHJ1c3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjdmNDIyZjEyLWY0NzYtNGE2Mi05ZmU5LTFlMDU1ZWI2ZDE5OSUyRmJ1c2luZXNzLWV0aGljcy0tY29ycG9yYXRlLXJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwsCiAgICAgICAgICAiZmlsZVR5cGUiOiAicGRmIiwKICAgICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICAgInBhZ2VSYW5nZSI6IFsKICAgICAgICAgICAgMgogICAgICAgICAgXSwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJxU0Y0IiwKICAgICAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDEwLAogICAgICAgICAgICAgIDE0CiAgICAgICAgICAgIF0KICAgICAgICAgIF0sCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiAxODAsCiAgICAgICAgICAidGltZXN0YW1wUmFuZ2UiOiBudWxsLAogICAgICAgICAgIm51bWJlck9mQXNzb2NpYXRlZExlc3NvbnMiOiAwCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgImhKSmciOiB7CiAgICAgICJ0eXBlIjogImFzc2Vzc21lbnQiLAogICAgICAiY29udGV4dCI6ICIiLAogICAgICAiYWRkaXRpb25zIjogW10sCiAgICAgICJwYWdlTGVuZ3RoIjogIm1kIiwKICAgICAgImRvY3VtZW50VGV4dCI6ICIiLAogICAgICAiaW5zdHJ1Y3Rpb25zIjogewogICAgICAgICJ0eXBlIjogImRvYyIsCiAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImhlYWRpbmciLAogICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgImxldmVsIjogMgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJDb3Vyc2UgQ29uY2x1c2lvbiAmIEZpbmFsIFF1ZXN0aW9ucyIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiYnVsbGV0TGlzdCIsCiAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiUmV2aWV3IG9mIGNvdXJzZSB0b3BpY3M6IGV0aGljcywgZGlsZW1tYXMsIGNvcnBvcmF0ZSByZWFkaW5lc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJGaW5hbCByZWZsZWN0aW9uIHF1ZXN0aW9uczoiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkhvdyB3aWxsIHlvdSBjcmVhdGUgYSBzYWZlIGVudmlyb25tZW50IGZvciBldGhpY2FsIGNvbmNlcm5zPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJXaGF0IHBlcnNvbmFsIHZhbHVlcyBhcmUgbm9uLW5lZ290aWFibGUgZm9yIHlvdSBpbiBhIGZ1dHVyZSBlbXBsb3llcj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiSG93IGNhbiB5b3UgY29udGludWUgdG8gZGV2ZWxvcCB5b3VyIGV0aGljYWwgXCJtdXNjbGVcIiBhbmQgY29ycG9yYXRlIHJlYWRpbmVzcz8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJnZW5lcmF0aW9uVHlwZSI6ICJhc3Nlc3NtZW50IiwKICAgICAgImRvY3VtZW50SW5zdGFuY2VzIjogWwogICAgICAgIHsKICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL21pbmRzbWl0aC91cGxvYWRzJTJGN2Y0MjJmMTItZjQ3Ni00YTYyLTlmZTktMWUwNTVlYjZkMTk5JTJGYnVzaW5lc3MtZXRoaWNzLS1jb3Jwb3JhdGUtcmVhZGluZXNzLnBkZiIsCiAgICAgICAgICAidGl0bGUiOiAiQnVzaW5lc3MgRXRoaWNzICYgQ29ycG9yYXRlIFJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgImR1cmF0aW9uIjogbnVsbCwKICAgICAgICAgICJmaWxlVHlwZSI6ICJwZGYiLAogICAgICAgICAgInBhZ2VDb3VudCI6IDYsCiAgICAgICAgICAicGFnZVJhbmdlIjogbnVsbCwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJzZzd4IiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IG51bGwsCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiBudWxsLAogICAgICAgICAgInRpbWVzdGFtcFJhbmdlIjogbnVsbCwKICAgICAgICAgICJudW1iZXJPZkFzc29jaWF0ZWRMZXNzb25zIjogMAogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgICI1a1pSIjogewogICAgICAidHlwZSI6IG51bGwsCiAgICAgICJjb250ZXh0IjogIiIsCiAgICAgICJhZGRpdGlvbnMiOiBbXSwKICAgICAgInBhZ2VMZW5ndGgiOiAibWQiLAogICAgICAiZG9jdW1lbnRUZXh0IjogIiIsCiAgICAgICJpbnN0cnVjdGlvbnMiOiB7CiAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiaGVhZGluZyIsCiAgICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgICAibGV2ZWwiOiAyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNoZWNrcG9pbnQgMTogUXVpY2sgUXVpeiAmIFJlZmxlY3Rpb24iLAogICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlF1aXogUXVlc3Rpb24gMTogVHJ1ZSBvciBGYWxzZTogQnVzaW5lc3MgZXRoaWNzIGlzIHByaW1hcmlseSBhYm91dCBmb2xsb3dpbmcgdGhlIGxhdy4iLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJ1bGxldExpc3QiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkFuc3dlcjogRmFsc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiUXVpeiBRdWVzdGlvbiAyOiBXaGljaCBvZiB0aGUgZm9sbG93aW5nIGlzIGEga2V5IGJlbmVmaXQgb2YgZXRoaWNhbCBidXNpbmVzcyBwcmFjdGljZXM/IiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJhKSBTaG9ydC10ZXJtIHByb2ZpdHMgYXQgYW55IGNvc3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiYikgSW5jcmVhc2VkIGVtcGxveWVlIHR1cm5vdmVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogImMpIEVuaGFuY2VkIGJyYW5kIHJlcHV0YXRpb24gYW5kIGN1c3RvbWVyIHRydXN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogImQpIEF2b2lkaW5nIGFsbCBidXNpbmVzcyByaXNrcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJBbnN3ZXI6IGMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiUmVmbGVjdGlvbiBQcm9tcHQ6IFRoaW5rIG9mIGEgY29tcGFueSB5b3UgYWRtaXJlLiBXaGF0IGV0aGljYWwgdmFsdWVzIGRvIHRoZXkgc2VlbSB0byBkZW1vbnN0cmF0ZT8gSG93IGRvZXMgaXQgYWZmZWN0IHlvdXIgcGVyY2VwdGlvbiBvZiB0aGVtPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiZG9jdW1lbnRJbnN0YW5jZXMiOiBbCiAgICAgICAgewogICAgICAgICAgInVybCI6ICJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbWluZHNtaXRoL3VwbG9hZHMlMkY3ZjQyMmYxMi1mNDc2LTRhNjItOWZlOS0xZTA1NWViNmQxOTklMkZidXNpbmVzcy1ldGhpY3MtLWNvcnBvcmF0ZS1yZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJ0aXRsZSI6ICJCdXNpbmVzcyBFdGhpY3MgJiBDb3Jwb3JhdGUgUmVhZGluZXNzLnBkZiIsCiAgICAgICAgICAiZHVyYXRpb24iOiBudWxsLAogICAgICAgICAgImZpbGVUeXBlIjogInBkZiIsCiAgICAgICAgICAicGFnZUNvdW50IjogNiwKICAgICAgICAgICJwYWdlUmFuZ2UiOiBbCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICAyLAogICAgICAgICAgICAgIDMKICAgICAgICAgICAgXQogICAgICAgICAgXSwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJGRnBjIiwKICAgICAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDE4LAogICAgICAgICAgICAgIDI2CiAgICAgICAgICAgIF0KICAgICAgICAgIF0sCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiAxMjAsCiAgICAgICAgICAidGltZXN0YW1wUmFuZ2UiOiBudWxsLAogICAgICAgICAgIm51bWJlck9mQXNzb2NpYXRlZExlc3NvbnMiOiAwCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgIlZmZzMiOiB7CiAgICAgICJ0eXBlIjogbnVsbCwKICAgICAgImNvbnRleHQiOiAiIiwKICAgICAgImFkZGl0aW9ucyI6IFtdLAogICAgICAicGFnZUxlbmd0aCI6ICJtZCIsCiAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgImluc3RydWN0aW9ucyI6IHsKICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRleHQiOiAiV2hhdCBpcyBhbiBFdGhpY2FsIERpbGVtbWE/IiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJTaW1wbGlmaWVkIEV4cGxhbmF0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJDaG9pY2UgYmV0d2VlbiB0d28gb3IgbW9yZSAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJyaWdodCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1hcmtzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpdGFsaWMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiIGFjdGlvbnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiRWFjaCBjaG9pY2UgaGFzIGEgcG90ZW50aWFsIGRvd25zaWRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkV4YW1wbGU6IExveWFsdHkgdG8gY293b3JrZXIgdnMuIGhvbmVzdHkgd2l0aCBib3NzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlJlYWwtV29ybGQgRXhhbXBsZTogUGhhcm1hY2V1dGljYWwgY29tcGFueSBwcmljaW5nIGEgbGlmZS1zYXZpbmcgZHJ1ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYnVsbGV0TGlzdCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiRGlsZW1tYTogSGlnaCBwcmljZSB2cy4gY29tcGFueSB2aWFiaWxpdHkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjdmNDIyZjEyLWY0NzYtNGE2Mi05ZmU5LTFlMDU1ZWI2ZDE5OSUyRmJ1c2luZXNzLWV0aGljcy0tY29ycG9yYXRlLXJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwsCiAgICAgICAgICAiZmlsZVR5cGUiOiAicGRmIiwKICAgICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICAgInBhZ2VSYW5nZSI6IFsKICAgICAgICAgICAgMwogICAgICAgICAgXSwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICI0cHR3IiwKICAgICAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDI3LAogICAgICAgICAgICAgIDMxCiAgICAgICAgICAgIF0KICAgICAgICAgIF0sCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiAxNTYsCiAgICAgICAgICAidGltZXN0YW1wUmFuZ2UiOiBudWxsLAogICAgICAgICAgIm51bWJlck9mQXNzb2NpYXRlZExlc3NvbnMiOiAwCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgIl8xb18iOiB7CiAgICAgICJ0eXBlIjogbnVsbCwKICAgICAgImNvbnRleHQiOiAiIiwKICAgICAgImFkZGl0aW9ucyI6IFtdLAogICAgICAicGFnZUxlbmd0aCI6ICJtZCIsCiAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgImluc3RydWN0aW9ucyI6IHsKICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRleHQiOiAiUmVhbC1Xb3JsZCBFeGFtcGxlOiBNYW5hZ2VyIGRpc2NvdmVyaW5nIG1pc2xlYWRpbmcgc2FsZXMgdGFjdGljcyIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAiYnVsbGV0TGlzdCIsCiAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiVHJhbnNwYXJlbmN5IFRlc3Q6IFdvdWxkIHlvdSBleHBsYWluIHRoZXNlIHRhY3RpY3MgdG8gdGhlIHdob2xlIGNvbXBhbnk/IiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiR29sZGVuIFJ1bGUgVGVzdDogV291bGQgeW91IHdhbnQgdG8gYmUgc29sZCB0byBpbiB0aGlzIHdheSBhcyBhIGN1c3RvbWVyPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNvbnNlcXVlbmNlcyBUZXN0OiBTaG9ydC10ZXJtIHJldmVudWUgdnMuIGxvbmctdGVybSByZXB1dGF0aW9uIGRhbWFnZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkNvbmNsdXNpb246IEFkZHJlc3MgdGhlIGlzc3VlIHdpdGggdGhlIHNhbGVzcGVyc29uIiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjdmNDIyZjEyLWY0NzYtNGE2Mi05ZmU5LTFlMDU1ZWI2ZDE5OSUyRmJ1c2luZXNzLWV0aGljcy0tY29ycG9yYXRlLXJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwsCiAgICAgICAgICAiZmlsZVR5cGUiOiAicGRmIiwKICAgICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICAgInBhZ2VSYW5nZSI6IFsKICAgICAgICAgICAgNAogICAgICAgICAgXSwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJLWEV0IiwKICAgICAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDM3LAogICAgICAgICAgICAgIDQxCiAgICAgICAgICAgIF0KICAgICAgICAgIF0sCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiAxMDksCiAgICAgICAgICAidGltZXN0YW1wUmFuZ2UiOiBudWxsLAogICAgICAgICAgIm51bWJlck9mQXNzb2NpYXRlZExlc3NvbnMiOiAwCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgIlEzY0wiOiB7CiAgICAgICJ0eXBlIjogbnVsbCwKICAgICAgImNvbnRleHQiOiAiIiwKICAgICAgImFkZGl0aW9ucyI6IFtdLAogICAgICAicGFnZUxlbmd0aCI6ICJtZCIsCiAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgImluc3RydWN0aW9ucyI6IHsKICAgICAgICAidHlwZSI6ICJkb2MiLAogICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJoZWFkaW5nIiwKICAgICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAgICJsZXZlbCI6IDIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRleHQiOiAiVW5kZXJzdGFuZGluZyBhbmQgQ29udHJpYnV0aW5nIHRvIENvcnBvcmF0ZSBDdWx0dXJlIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJTaW1wbGlmaWVkIEV4cGxhbmF0aW9uOiBDb21wYW55J3MgdW5pcXVlIHBlcnNvbmFsaXR5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJidWxsZXRMaXN0IiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdEl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhZ3JhcGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJWYWx1ZXMsIGNvbW11bmljYXRpb24gc3R5bGVzLCB3b3JrIGVudmlyb25tZW50IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkFkYXB0IHRvIHRoZSBjdWx0dXJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXN0SXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFncmFwaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlVuZGVyc3RhbmQgdGhlIGNvbXBhbnkncyBDb2RlIG9mIENvbmR1Y3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3RJdGVtIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiUmVhbC1Xb3JsZCBFeGFtcGxlOiBOZXRmbGl4J3MgXCJGcmVlZG9tIGFuZCBSZXNwb25zaWJpbGl0eVwiIiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXJsIjogImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9taW5kc21pdGgvdXBsb2FkcyUyRjdmNDIyZjEyLWY0NzYtNGE2Mi05ZmU5LTFlMDU1ZWI2ZDE5OSUyRmJ1c2luZXNzLWV0aGljcy0tY29ycG9yYXRlLXJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAgICJkdXJhdGlvbiI6IG51bGwsCiAgICAgICAgICAiZmlsZVR5cGUiOiAicGRmIiwKICAgICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICAgInBhZ2VSYW5nZSI6IFsKICAgICAgICAgICAgNQogICAgICAgICAgXSwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJ2TTB6IiwKICAgICAgICAgICJkb2N1bWVudFRleHQiOiAiIiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IFsKICAgICAgICAgICAgWwogICAgICAgICAgICAgIDU0LAogICAgICAgICAgICAgIDU2CiAgICAgICAgICAgIF0KICAgICAgICAgIF0sCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiAxMzQsCiAgICAgICAgICAidGltZXN0YW1wUmFuZ2UiOiBudWxsLAogICAgICAgICAgIm51bWJlck9mQXNzb2NpYXRlZExlc3NvbnMiOiAwCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgIjF2aU0iOiB7CiAgICAgICJ0eXBlIjogImludHJvZHVjdGlvbiIsCiAgICAgICJjb250ZXh0IjogIiIsCiAgICAgICJhZGRpdGlvbnMiOiBbXSwKICAgICAgInBhZ2VMZW5ndGgiOiAibWQiLAogICAgICAiZG9jdW1lbnRUZXh0IjogIiIsCiAgICAgICJpbnN0cnVjdGlvbnMiOiB7CiAgICAgICAgInR5cGUiOiAiZG9jIiwKICAgICAgICAiY29udGVudCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAicGFyYWdyYXBoIiwKICAgICAgICAgICAgImNvbnRlbnQiOiBbXQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgImRvY3VtZW50SW5zdGFuY2VzIjogWwogICAgICAgIHsKICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL21pbmRzbWl0aC91cGxvYWRzJTJGN2Y0MjJmMTItZjQ3Ni00YTYyLTlmZTktMWUwNTVlYjZkMTk5JTJGYnVzaW5lc3MtZXRoaWNzLS1jb3Jwb3JhdGUtcmVhZGluZXNzLnBkZiIsCiAgICAgICAgICAidGl0bGUiOiAiQnVzaW5lc3MgRXRoaWNzICYgQ29ycG9yYXRlIFJlYWRpbmVzcy5wZGYiLAogICAgICAgICAgImR1cmF0aW9uIjogbnVsbCwKICAgICAgICAgICJmaWxlVHlwZSI6ICJwZGYiLAogICAgICAgICAgInBhZ2VDb3VudCI6IDYsCiAgICAgICAgICAicGFnZVJhbmdlIjogbnVsbCwKICAgICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICAgImRvY3VtZW50SWQiOiAic2c3eCIsCiAgICAgICAgICAiaW5zdGFuY2VJZCI6ICJzZzd4IiwKICAgICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAgICJwYXJ0aXRpb25SYW5nZSI6IG51bGwsCiAgICAgICAgICAicmFuZ2VXb3JkQ291bnQiOiBudWxsLAogICAgICAgICAgInRpbWVzdGFtcFJhbmdlIjogbnVsbCwKICAgICAgICAgICJudW1iZXJPZkFzc29jaWF0ZWRMZXNzb25zIjogMAogICAgICAgIH0KICAgICAgXQogICAgfQogIH0sCiAgInN0b3J5Ym9hcmRPcmRlciI6IFsKICAgICIxdmlNIiwKICAgICJ5WWQyIiwKICAgICJsSXpHIiwKICAgICJvVzdGIiwKICAgICJCOEZGIiwKICAgICI1a1pSIiwKICAgICJVZ0pBIiwKICAgICJWZmczIiwKICAgICJQT3ZuIiwKICAgICJfMW9fIiwKICAgICJJZkNUIiwKICAgICJfZndoIiwKICAgICJKZzdXIiwKICAgICJSRngyIiwKICAgICJRM2NMIiwKICAgICJqdjc0IiwKICAgICJac3ROIiwKICAgICJoSkpnIgogIF0sCiAgInN0b3J5Ym9hcmRPcHRpb25zIjogewogICAgIm1vZGVsIjogImdlbWluaS0yLjUtZmxhc2giLAogICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyBhbmQgQ29ycG9yYXRlIFJlYWRpbmVzcyIsCiAgICAibGVuZ3RoIjogLTEsCiAgICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgICAibGFuZ3VhZ2UiOiAiRU4iLAogICAgInByb3ZpZGVyIjogImdlbWluaSIsCiAgICAiaW1hZ2VUeXBlIjogIkdlbmVyYXRlZCIsCiAgICAiaW1hZ2VNb2RlbCI6ICJnZW1pbmk6aW1hZ2VuLTQuMC1nZW5lcmF0ZS1wcmV2aWV3LTA2LTA2IiwKICAgICJpbWFnZVN0eWxlIjogIi0gVGhlIGltYWdlIHNob3VsZCBiZSByZWFsaXN0aWMgb3IgZ3JhcGhpYyBcbiAgLSBEbyBub3QgY3JlYXRlIGltYWdlcyB0aGF0IGFyZSBhYnN0cmFjdCBjb25jZXB0cyBvciB0aGluZ3MgdGhhdCB0aGF0IGhhdmUgdGV4dCBpbiB0aGVtLiBcbiAgLSBObyB0aGluZ3MgdGhhdCB3b3VsZCBoYXZlIHJlZmxlY3Rpb25zIG9yIGxvdHMgb2YgcGVvcGxlLCBzcGVjaWZ5IHRoZSBudW1iZXIgb2YgcGVvcGxlLlxuICAtIEJlIHN1cmUgdG8gbWVudGlvbiB0aGUgaW1hZ2UgaGFzIGJlIHRvIGJlIGluIGdyZWF0IGxpZ2h0aW5nLCBsb3RzIG9mIGxpZ2h0LiIsCiAgICAicGFnZUxlbmd0aCI6ICJtZCIsCiAgICAiZGVzY3JpcHRpb24iOiAiIiwKICAgICJ0aWxlc09wdGlvbnMiOiBbCiAgICAgICJ0ZXh0IiwKICAgICAgImxpc3QiLAogICAgICAiaW1hZ2UiLAogICAgICAicXVlc3Rpb24iLAogICAgICAiYWNjb3JkaW9uIiwKICAgICAgImZsYXNoY2FyZHMiLAogICAgICAibWF0Y2hpbmciLAogICAgICAic29ydGluZyIsCiAgICAgICJ0YWJzIiwKICAgICAgInRpbWVsaW5lIiwKICAgICAgInNlcGFyYXRvciIsCiAgICAgICJzaG9ydGFuc3dlciIsCiAgICAgICJwcm9jZXNzIiwKICAgICAgInRhYmxlIiwKICAgICAgInF1b3RlIiwKICAgICAgImNoYXJ0IiwKICAgICAgIm5vdGUiLAogICAgICAic2NlbmFyaW8iLAogICAgICAiZW1iZWQiLAogICAgICAiZWRpdGFibGV2aWRlbyIKICAgIF0sCiAgICAiaW50ZXJhY3Rpdml0eSI6IDgsCiAgICAiZ2VuZXJhdGlvblR5cGUiOiAiZm9sbG93IiwKICAgICJpbWFnZXNGcm9tRG9jcyI6IHRydWUsCiAgICAiY2FuQWRkQ2l0YXRpb25zIjogdHJ1ZSwKICAgICJpbmNsdWRlUGFnZVR5cGVzIjogWwogICAgICAic2NlbmFyaW8iLAogICAgICAiaW50cm9kdWN0aW9uIiwKICAgICAgImNvcmUtY29udGVudCIsCiAgICAgICJyZWFsV29ybGRBcHBsaWNhdGlvbiIsCiAgICAgICJhc3Nlc3NtZW50IiwKICAgICAgInZpZGVvIgogICAgXSwKICAgICJkb2N1bWVudEluc3RhbmNlcyI6IFsKICAgICAgewogICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL21pbmRzbWl0aC91cGxvYWRzJTJGN2Y0MjJmMTItZjQ3Ni00YTYyLTlmZTktMWUwNTVlYjZkMTk5JTJGYnVzaW5lc3MtZXRoaWNzLS1jb3Jwb3JhdGUtcmVhZGluZXNzLnBkZiIsCiAgICAgICAgInRpdGxlIjogIkJ1c2luZXNzIEV0aGljcyAmIENvcnBvcmF0ZSBSZWFkaW5lc3MucGRmIiwKICAgICAgICAiZHVyYXRpb24iOiBudWxsLAogICAgICAgICJmaWxlVHlwZSI6ICJwZGYiLAogICAgICAgICJwYWdlQ291bnQiOiA2LAogICAgICAgICJwYWdlUmFuZ2UiOiBudWxsLAogICAgICAgICJ3b3JkQ291bnQiOiAxNzE3LAogICAgICAgICJkb2N1bWVudElkIjogInNnN3giLAogICAgICAgICJpbnN0YW5jZUlkIjogInNnN3giLAogICAgICAgICJjb21wcmVzc2VkVXJsIjogbnVsbCwKICAgICAgICAicGFydGl0aW9uUmFuZ2UiOiBudWxsLAogICAgICAgICJyYW5nZVdvcmRDb3VudCI6IG51bGwsCiAgICAgICAgInRpbWVzdGFtcFJhbmdlIjogbnVsbCwKICAgICAgICAibnVtYmVyT2ZBc3NvY2lhdGVkTGVzc29ucyI6IDAKICAgICAgfQogICAgXSwKICAgICJleHRyYWN0ZWRTdHlsZUd1aWRlIjogIiIsCiAgICAiaW5jbHVkZUNvdXJzZUNvbnRleHQiOiBmYWxzZSwKICAgICJhZGRpdGlvbmFsSW5zdHJ1Y3Rpb25zIjogewogICAgICAiVG9uZSI6ICJFeHBlcnQgd2hvIGlzIGludGVyYWN0aXZlIiwKICAgICAgIkxlYXJuZXIiOiAiTWFuYWdlbWVudCBTdHVkZW50cyIsCiAgICAgICJPdXRsaW5lIjogbnVsbCwKICAgICAgIk9iamVjdGl2ZXMiOiAiIFRvIGVxdWlwIHlvdSB3aXRoIGEgc3Ryb25nIGV0aGljYWwgZm91bmRhdGlvbiBhbmQgdGhlIHByYWN0aWNhbCBza2lsbHMgdG8gbmF2aWdhdGUgY29tcGxleCB3b3JrcGxhY2Ugc2l0dWF0aW9ucywgbWFraW5nIHlvdSBhIG1vcmUgY29uZmlkZW50IGFuZCBwcmVwYXJlZCBtYW5hZ2VtZW50IHByb2Zlc3Npb25hbC4iLAogICAgICAiV3JpdGluZ1N0eWxlIjogbnVsbAogICAgfSwKICAgICJpc0N1cnJlbnREZXNpZ25WZXJzaW9uIjogZmFsc2UsCiAgICAiaXNTZXF1ZW50aWFsR2VuZXJhdGlvbiI6IHRydWUKICB9LAogICJzbmFwc2hvdEluZm8iOiBudWxsLAogICJyb290VHlwZSI6IG51bGwKfQ==";